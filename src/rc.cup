
import java_cup.runtime.*;
import java.util.*;
import STO.*;
import Types.*;
import Operator.*;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

parser code 
{:
:};

scan with {: return new Symbol (sym.EOF); :};

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

terminal
    T_AMPERSAND,
    T_AND,
    T_ARROW,
    T_ASSIGN,
    T_BAR,
    T_BOOL,
    T_BREAK,
    T_CARET,
    T_CIN,
    T_COLON,
    T_COLONCOLON,
    T_COMMA,
    T_CONST,
    T_CONTINUE,
    T_COUT,
    T_DOT,
    T_ELSE,
    T_ENDL,
    T_EQU,
    T_EXIT,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FOREACH,
    T_FUNCPTR,
    T_FUNCTION,
    T_GT,
    T_GTE,
    T_IF,
    T_INT,
    T_ISTREAM,
    T_LBRACE,
    T_LBRACKET,
    T_LPAREN,
    T_LT,
    T_LTE,
    T_MINUS,
    T_MINUSMINUS,
    T_MOD,
    T_NEQ,
    T_NOT,
    T_NULLPTR,
    T_OR,
    T_OSTREAM,
    T_PLUS,
    T_PLUSPLUS,
    T_RBRACE,
    T_RBRACKET,
    T_RETURN,
    T_RPAREN,
    T_SEMI,
    T_SIZEOF,
    T_SLASH,
    T_STAR,
    T_STATIC,
    T_STRUCTDEF,
    T_THIS,
    T_TRUE,
    T_TYPEDEF,
    T_WHILE,
    T_VOID,
    T_NEW,
    T_DELETE,
    T_AUTO
    ;

terminal String
    T_FLOAT_LITERAL,
    T_INT_LITERAL,
    T_STR_LITERAL,
    T_ID_U,
    T_ID
    ;


//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

non terminal    
    Program,
    OptGlobalDecls,
    GlobalDecls,
    GlobalDecl,
    FuncDef,
    FuncDecl,
    ExternDecl,
    VarDecl,
    ConstDecl,
    TypedefDecl,
    OptRef,
    FieldsList,
    FieldList,
    OptStmtList,
    StmtList,
    Stmt,
    CodeBlock,
    IfStmt,
    OptElse,
    ForeachStmt,
    WhileStmt,
    BreakStmt,
    ContinueStmt,
    ExitStmt,
    ReturnStmt,
    ReadStmt,
    WriteStmt,
    NewStmt,
    DeleteStmt,
    WritePairList,
    WritePair,
    ConstExpr,
    UnarySign,
    Equality,
    Relation,
    OptInit,
    OptModifierList,
    ModifierList,
    Modifier,
    OptArrayDef
    ;

non terminal String
    ;
    
non terminal Boolean
	OptStatic
	;

non terminal STO
    Expr,
    Expr0,
    Expr1,
    Expr2,
    Expr3,
    Expr4,
    Expr5,
    Expr6,
    Expr7,
    Expr8,
    Designator,
    Designator2,
    Designator3,
    QualIdent,
    IterationVarDecl
    ;

non terminal VarSTO
    ParamDecl
    ;
    
non terminal Type
    BasicType,
    SubType,
    Type,
    UndecoratedType,
    ReturnType
    ;
    	
non terminal Vector
    IdListUpper,
    OptParamList,
    OptExprList, 
        ExprList,
    ParamList
    ;

non terminal Hashtable
	IdList,
	IdListWOptInit,
	IdListWInit
	;

non terminal BinaryOp
	AddOp,
	MulOp
	;
	
non terminal UnaryOp
	IncDecOp
	;
	
//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

Program ::=    {:
                         ((MyParser) parser).DoProgramStart(); 
                    :}
                    OptGlobalDecls
                    {:
                         ((MyParser) parser).DoProgramEnd();
                    :}
    ;

OptGlobalDecls ::=  GlobalDecls
    |                     /* empty */
    ;

GlobalDecls ::= GlobalDecl
    |               GlobalDecls GlobalDecl
    ;


GlobalDecl ::=  ExternDecl
    |               VarDecl
    |               ConstDecl
    |               TypedefDecl
    |               FuncDecl
    |               FuncDef
    ;

ExternDecl ::= T_EXTERN UndecoratedType IdList:_3 T_SEMI
                    {:
                         ((MyParser) parser).DoExternDecl (_3);
                    :}
    ;

VarDecl ::=     OptStatic:_1 UndecoratedType:_2 IdListWOptInit:_3 T_SEMI
                    {: 
                         RESULT = ((MyParser) parser).DoVarDecl (_3,_2,(Boolean)_1);
                    :}
    ;

ConstDecl ::=  OptStatic T_CONST UndecoratedType:_2 IdListWInit:_3 T_SEMI
                    {:
                        ((MyParser) parser).DoConstDecl (_3,_2);
                    :}
    ;


OptStatic ::=   T_STATIC
					{:
						RESULT = true;
					:}
    |               /* empty */
    				{:
    					RESULT = false;
    				:}	
    ;


TypedefDecl ::=     T_TYPEDEF Type:_1 IdListUpper:_2 T_SEMI
                    {:
                        ((MyParser) parser).DoTypedefDecl (_2, _1);
                    :}
    |               T_STRUCTDEF T_ID_U:_1 T_LBRACE
                    {:
                    	((MyParser) parser).DoStructdef(_1);
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).DoStructScope(_1);
                    :}
                    FieldsList T_RBRACE T_SEMI
                    {:
                         ((MyParser) parser).DoBlockClose();
                         ((MyParser) parser).DoStructdefDecl (_1);
                    :}
    ;


FieldsList ::=   FieldList:_1
					{:
						RESULT = new Vector();
						((Vector)RESULT).add(_1);
					:}
    |               FieldsList:_1 FieldList:_2
    				{:
    					RESULT = _1;
    					((Vector)RESULT).add(_2);
    				:}
    ;


FieldList ::=     UndecoratedType:_1 IdList:_2 T_SEMI
					{:
						RESULT = ((MyParser) parser).DoVarDecl(_2, _1, false);
					:}
    |               FuncDef:_1
    				{:
    					RESULT = _1;
    				:}
    ;


FuncDef ::=    T_FUNCTION T_COLON ReturnType:_1 OptRef:_4 T_ID:_2
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_2, _1, (Boolean)_4);
                        
                    :}
                    T_LPAREN OptParamList:_3 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_3);
                    :}
                    T_LBRACE OptStmtList T_RBRACE
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


FuncDecl ::=   T_EXTERN T_FUNCTION T_COLON ReturnType:_1 T_ID:_2
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_2, _1, false);
                    :}
                    T_LPAREN OptParamList:_3 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_3);
                    :}
                    T_SEMI
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


Type ::=         SubType:_1 OptModifierList:_3 OptArrayDef:_2
				{:
				//we set the innertype of the array here tansen.
					RESULT = ((MyParser) parser).DoSetSubType(_1, (PointerType)_3, (ArrayType)_2);
					 
				:}
    |               T_FUNCPTR T_COLON ReturnType:_1 OptRef:_2 T_LPAREN OptParamList:_3 T_RPAREN
    				{:
    					RESULT = ((MyParser) parser).DoFuncPointer(_1, _3, (Boolean)_2);
    				:}
    ;

UndecoratedType ::= SubType:_1 
					{:
						RESULT = _1;
					:}
    |               T_FUNCPTR T_COLON ReturnType:_1 OptRef:_2 T_LPAREN OptParamList:_3 T_RPAREN
    				{:
    					RESULT = ((MyParser) parser).DoFuncPointer(_1, _3, (Boolean)_2);
    				:}
    ;

SubType ::=         QualIdent:_1
					{:
						RESULT = _1.getType();
					:}
    |               BasicType:_1
    				{:
						RESULT = _1;
					:}
    ;

BasicType ::=       T_INT:_1
					{:
						RESULT = new IntegerType();
					:}
    |               T_FLOAT:_1
    				{:
    					RESULT = new FloatType();
    				:}
    |               T_BOOL:_1
    				{:
    					RESULT = new BooleanType();
    				:}
    ;


OptModifierList ::= ModifierList:_1
					{:
						RESULT = _1;
					:}
    |               /* empty */
    ;


ModifierList ::=    Modifier:_1
					{:
						RESULT = _1;
					:}
    |               ModifierList:_2 Modifier:_3
    				{:
    					PointerType pointer = (PointerType) _3;
    					pointer.setContainingType((PointerType) _2);
    					RESULT = pointer;
    				:}
    ;


Modifier ::=        T_STAR
					{:
						RESULT = new PointerType();
					:}
    ;


OptArrayDef ::=     T_LBRACKET ConstExpr:_1 T_RBRACKET
					{:
						
						RESULT = ((MyParser) parser).DoArrayDecl((STO)_1);
					:}
    |               /* empty */
    ;


ReturnType ::=      SubType:_1 OptModifierList:_2
                    {:
                        // You should determine the type and return it here
                        if(_2 == null){
                        	RESULT = _1;
                        }
                        else {
                        	RESULT = (Type)_2;
                        	((PointerType) RESULT).setContainingType(_1);
                        }
                    :}
    |               T_VOID
    				{:
    					RESULT = new VoidType();
    				:}
    ;


CodeBlock ::=       T_LBRACE
                    {: ((MyParser) parser).DoBlockOpen(); :}
                    OptStmtList
		    		{: ((MyParser) parser).DoBlockClose(); :}
                    T_RBRACE
    ;


OptStmtList ::=     StmtList
    |               /* empty */
    ;


StmtList ::=        Stmt
    |               StmtList Stmt
    ;


Stmt ::=        VarDecl
    |               ConstDecl
    |               TypedefDecl
    |               CodeBlock
    |               Expr T_SEMI
    |               IfStmt
    |               WhileStmt
    |               ForeachStmt
    |               BreakStmt
    |               ContinueStmt
    |               ExitStmt
    |               ReturnStmt
    |               ReadStmt
    |               WriteStmt
    |				NewStmt
    |				DeleteStmt
    ;



OptParamList ::=    ParamList:_1
					{:
						RESULT = _1;
					:}
  		      |      {:
  		      			RESULT = new Vector<VarSTO>();
  		      		:}
    ;


ParamList ::=       ParamDecl:_1
					{:
						RESULT = new Vector<VarSTO>();
						if(((STO)_1).getType().isArray()) {
							((STO)_1).setIsAddressable(true);
							((STO)_1).setIsModifiable(false);
						}
						RESULT.add(_1);
					:}
    |               ParamList:_1 T_COMMA ParamDecl:_2
    				{:
    					if(((STO)_2).getType().isArray()) {
							((STO)_2).setIsAddressable(true);
							((STO)_2).setIsModifiable(false);
						}
    					_1.add(_2);
    					RESULT = _1;
    				:}
    ;


ParamDecl ::=       Type:_1 OptRef:_2 T_ID:_3
					{:
						RESULT = new VarSTO(_3, _1, (Boolean)_2);
					:}
    ;


OptRef ::=          T_AMPERSAND
					{:
						RESULT = true;
					:}
    |               {:
    					RESULT = false;
    				:}
    ;


IdList ::=          OptModifierList:_3 OptArrayDef:_4 T_ID:_1
                    {:
                    	Hashtable h = new Hashtable();
                        STO sto = (STO) ((MyParser) parser).DoCreateDeclaration(_1, null,  (Type) _3, (Type) _4);
                        if(_4 != null)
                        h.put(sto, new VarSTO("Placeholder"));
                        RESULT = h;
                    :}
    |               IdList:_1 T_COMMA OptModifierList:_5 OptArrayDef:_6 T_ID:_3
                    {:
                        Hashtable h = (Hashtable) _1;
                        STO sto = (STO) ((MyParser) parser).DoCreateDeclaration(_3, null, (Type) _5, (Type) _6);
                        h.put (sto, new VarSTO("Placeholder"));
                        RESULT = h;
                    :}
    ;


IdListUpper ::=     T_ID_U:_1
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    :}
    |               IdListUpper:_1 T_COMMA T_ID_U:_3
                    {:
                        RESULT = _1;
                        RESULT.addElement (_3);
                    :}
    ;


IdListWOptInit ::=  OptModifierList:_3 OptArrayDef:_4 T_ID:_1 OptInit:_2
                    {:
                    
                        Hashtable h = new Hashtable ();
                        STO sto = (STO)((MyParser) parser).DoCreateDeclaration(_1, (STO)_2,  (Type)_3, (Type)_4);
                        h.put (sto, _2 == null ? new VarSTO("Placeholder") : _2);
                        RESULT = h;
                    :}
    |               IdListWOptInit:_1 T_COMMA OptModifierList:_5 OptArrayDef:_6 T_ID:_3 OptInit:_4
                    {:
                    	Hashtable h = (Hashtable) _1;
                    	STO sto = (STO)((MyParser) parser).DoCreateDeclaration(_3, (STO)_4, (Type) _5, (Type) _6);
                    	h.put(sto,_4 == null ? new VarSTO("Placeholder") : _4);
                        RESULT = h;
                    :}
    ;

IdListWInit ::=     OptModifierList:_3 OptArrayDef:_4 T_ID:_1 T_ASSIGN ConstExpr:_2
                    {:
                    
                        RESULT = new Hashtable ();
                        
                        STO sto = (STO)((MyParser) parser).DoCreateConstDeclaration(_1, (STO)_2);
                        RESULT.put (sto, _2 == null ? "" : _2);
                    :}
    |               IdListWOptInit:_1 T_COMMA OptModifierList:_5 OptArrayDef:_6 T_ID:_3 OptInit:_4
                    {:
                    	Hashtable h = (Hashtable) _1;
                    	STO sto = (STO)((MyParser) parser).DoCreateConstDeclaration(_3, (STO)_4);
                    	h.put(sto, _4 == null ? "" : _4);
                        RESULT = h;
                    :}
    ;


OptInit ::=         T_ASSIGN Expr:_1
					{:
			RESULT = _1;
					:}
    |               /* empty */
    ;

IfStmt ::=          T_IF Expr:_1 CodeBlock:_2 OptElse:_3
					{:
						((MyParser) parser).DoIfStmt(_1, (STO)_2, (STO)_3);
					:}
    ;


OptElse ::=         T_ELSE CodeBlock
    |               /* empty */
    ;


WhileStmt ::=       T_WHILE Expr:_1 CodeBlock:_2
					{:
						((MyParser) parser).DoWhileStmt(_1, (STO)_2);
						((MyParser) parser).DoCloseLoop();
					:}
    ;


IterationVarDecl ::= Type:_3 OptRef:_2 T_ID:_1
                    {:
                        RESULT = new VarSTO(_1, _3, (Boolean) _2);
                    :}
    ;
 
ForeachStmt ::=     T_FOREACH T_LPAREN IterationVarDecl:_1 T_COLON Expr:_2 T_RPAREN
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).DoIterationVarDecl ((STO)_1);
                        ((MyParser) parser).DoForeachStmt((STO)_1, _2);
                    :}
                    CodeBlock
                    {:
                		((MyParser) parser).DoCloseLoop();
                        ((MyParser) parser).DoBlockClose();
                    :}
    ;


BreakStmt ::=       T_BREAK T_SEMI
					{:
						((MyParser) parser).DoBreakStmt();
					:}
    ;


ContinueStmt ::=    T_CONTINUE T_SEMI
					{:
						((MyParser) parser).DoContinueStmt();
					:}
    ;


ExitStmt ::=        T_EXIT T_LPAREN Expr:_1 T_RPAREN T_SEMI
					{:
						((MyParser) parser).DoExitStmt(_1);
					:}
    ;


ReturnStmt ::=   T_RETURN T_SEMI
					{:
						((MyParser) parser).DoReturnCheck(null);
					:}
    |               T_RETURN Expr:_1 T_SEMI
    				{:
    					((MyParser) parser).DoReturnCheck(_1);
    				:}
    ;


ReadStmt ::=        T_CIN T_ISTREAM Designator T_SEMI
    ;


WriteStmt ::=       T_COUT T_OSTREAM WritePairList:_1 T_SEMI
					{:
						//cout can be int or string, cannot precast.
						//((MyParser) parser).doCout(_1);
						//we'll just do it in writepairlist lol.
					:}
    ;

NewStmt ::=       T_NEW Designator:_1 T_SEMI
                    {:
                        ((MyParser) parser).doNew(_1);
                    :}
    ;

DeleteStmt ::=    T_DELETE Designator:_1 T_SEMI
					{:
						((MyParser) parser).doDelete(_1);
					:}
    ;

UnarySign ::= 	  T_PLUS
				{:
					//not sure if we need this?
				:}
	|			  T_MINUS
					{:
						RESULT = "-";
					:}
	;
    
WritePairList ::=   WritePair:_1
					{:
						RESULT = _1;
					:}
    |               WritePairList:_1 T_OSTREAM WritePair
    				{:
    					RESULT = _1;
    				:}
    ;


WritePair ::=    Expr:_1
				{:
					//we'll do it anyways since sto.
					((MyParser) parser).doCout((STO)_1);
				:}
    |               T_ENDL
    			{:
    				((MyParser) parser).doCoutEndl();
    			:}
    ;


ConstExpr ::=    Expr:_1
					{:
						RESULT = _1;
					:}
    ;


OptExprList ::=     ExprList:_1
					{:
						RESULT = (Vector<STO>)_1;
					:}
    |               {:
    					RESULT = new Vector<STO>();
    				:}
    ;


ExprList ::=     Expr:_1
					{:
						RESULT = new Vector<STO>();
						RESULT.add(_1);
					:}
    |               ExprList:_1 T_COMMA Expr:_2
    				{:
    					RESULT = _1;
    					RESULT.add(_2);
    					
    				:}
    ;


Expr ::=         Designator:_1 T_ASSIGN Expr:_2
                    {:
                        RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                    :}
    |               Expr0:_1
                    {:
						RESULT = _1;
                    :}
    ;


Expr0 ::=        Expr0:_1 T_OR Expr1:_2
                    {:
			RESULT = ((MyParser) parser).DoBinaryOp (_1, new OrOp("||"), _2);
                    :}
    |               Expr1:_1
                    {:
			RESULT = _1;
                    :}
    ;


Expr1 ::=        Expr1:_1 T_AND Expr2:_2
                    {:
			RESULT = ((MyParser) parser).DoBinaryOp (_1, new AndOp("&&"), _2);
                    :}
    |               Expr2:_1
                    {:
			RESULT = _1;
                    :}
    ;


Expr2 ::=        Expr2:_1 T_BAR Expr3:_2
                    {:
			RESULT = ((MyParser) parser).DoBinaryOp (_1, new BwOrOp("|"), _2);
                    :}
    |               Expr3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr3 ::=        Expr3:_1 T_CARET Expr4:_2
                    {:
			RESULT = ((MyParser) parser).DoBinaryOp (_1, new BwXorOp("^"), _2);
                    :}
    |               Expr4:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr4 ::=        Expr4:_1 T_AMPERSAND Expr5:_2
                    {:
			RESULT = ((MyParser) parser).DoBinaryOp (_1, new BwAndOp("&"), _2);
                    :}
    |               Expr5:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr5 ::=           Expr5:_1 Equality:_2 Expr6:_3
                    {:
                        RESULT = ((MyParser) parser).DoComparisonOp(_1, (ComparisonOp)_2, _3);
                    :}
    |               Expr6:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr6 ::=           Expr6:_1 Relation:_2 Expr7:_3
                    {:
                        RESULT = ((MyParser) parser).DoComparisonOp(_1, (ComparisonOp)_2, _3);
                    :}
    |               Expr7:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr7 ::=           Expr7:_1 AddOp:_2 Expr8:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryOp(_1,_2,_3);
                    :}
    |               Expr8:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr8 ::=        Expr8:_1 MulOp:_2 Designator:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryOp(_1,_2,_3);
                    :}
    |               Designator:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Equality ::=     T_EQU
				{:
					RESULT = new EqualOp("==");
				:}
    |               T_NEQ
    			{:
					RESULT = new NotEqualOp("!=");
				:}
    ;


Relation ::=     T_LT
				{:
					RESULT = new LessThanOp("<");
				:}
    |               T_GT
    			{:
					RESULT = new GreaterThanOp(">");
				:}
    |               T_LTE
    			{:
					RESULT = new LessThanOrEqualOp("<=");
				:}
    |               T_GTE
   				 {:
					RESULT = new GreaterThanOrEqualOp(">=");
				:}
    ;


AddOp ::=       T_PLUS
                    {:
                        RESULT = new AddOp("+");
                    :}
    |               T_MINUS
                    {:
                        RESULT = new MinusOp("-");
                    :}
    ;


MulOp ::=       T_STAR
                    {:
                        RESULT = new MulOp("*");
                    :}
    |               T_SLASH
                    {:
                        RESULT = new DivOp("/");
                    :}
    |               T_MOD
                    {:
                        RESULT = new ModOp("%");
                    :}
    ;


IncDecOp ::=        T_PLUSPLUS
                    {:
                        RESULT = new IncOp("++");
                    :}
    |               T_MINUSMINUS
                    {:
                        RESULT = new DecOp("--");
                    :}
    ;


Designator ::= T_STAR Designator:_1
                    {:
						RESULT = ((MyParser) parser).DoStarDereference(_1);
                    :}
    |               T_AMPERSAND Designator:_1
                    {:
						RESULT = ((MyParser) parser).DoAddressOf(_1);
                    :}
    |               UnarySign:_2 Designator:_1
                    {:
						if(_1 instanceof ConstSTO && _2 == "-") {
							ConstSTO newConst = (ConstSTO) _1;
							newConst.setValue(newConst.getValue() * -1);
							RESULT = newConst;
						} else {												
							RESULT = _1;
						}
                    :}
    |               T_NOT Designator:_2
                    {:
						RESULT = ((MyParser) parser).DoUnaryOp(new NotOp("!"),_2,"!");
                    :}
    |               T_SIZEOF T_LPAREN Designator:_2 T_RPAREN
                    {:
						RESULT = ((MyParser) parser).DoSizeOf(_2);
                    :}
    |               T_SIZEOF T_LPAREN Type:_2 T_RPAREN
                    {:
						RESULT = ((MyParser) parser).DoSizeOf(new VarSTO("", _2));
                    :}
    |               T_LPAREN Type:_1 T_RPAREN Designator:_2
                    {:
						RESULT = ((MyParser) parser).DoTypeCast(_1,_2);
                    :}
    |               IncDecOp:_1 Designator:_2
                    {:
						RESULT = ((MyParser) parser).DoUnaryOp(_1,_2,"pre");
                    :}
    |               Designator2:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


Designator2 ::=     Designator2:_1 T_DOT T_ID:_3
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    :}
    |               Designator2:_1 T_LBRACKET Expr:_5 T_RBRACKET
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1, (STO) _5);
                    :}
    |               Designator2:_1 T_ARROW T_ID:_2
                    {:
                        RESULT = ((MyParser) parser).DoArrowDereference(_1, _2);
                    :}
    |               Designator2:_1 IncDecOp:_2
                    {:
                        RESULT = ((MyParser) parser).DoUnaryOp(_2,_1,"post");
                    :}
    |               Designator2:_1 T_LPAREN OptExprList:_4 T_RPAREN
                    {:
                        RESULT = ((MyParser) parser).DoFuncCall (_1, (Vector<STO>)_4);
                    :}
    |               Designator3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Designator3 ::=     T_LPAREN Expr:_2 T_RPAREN
                    {:
                        RESULT = _2;
                    :}
    |               T_INT_LITERAL:_1
                    {:
                    	RESULT = new ConstSTO(_1, new IntegerType(), false, false);
                    :}
    |               T_FLOAT_LITERAL:_1
                    {:
                        ConstSTO sto = new ConstSTO (_1, new FloatType(), false, false);
                        RESULT = ((MyParser) parser).assignFloat(sto);
                    :}
    |               T_STR_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1);
                    :}
    |               T_TRUE
                    {:
                        RESULT = new ConstSTO ("true", new BooleanType("bool"), false, false);
                    :}
    |               T_FALSE
                    {:
                        RESULT = new ConstSTO ("false", new BooleanType("bool"), false, false);
                    :}
    |               T_NULLPTR
                    {:
                        RESULT = new ConstSTO ("nullptr", new NullPointerType(), false, false);
                    :}
    |               T_THIS
                    {:
                        RESULT = ((MyParser) parser).DoGetThis();
                    :}
    |               T_COLONCOLON T_ID:_1
                    {:
                    	//global
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1, true);
                    :}
    |               T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1, false);
                    :}
    ;


QualIdent ::=       T_ID_U:_1
                    {:
                       RESULT = ((MyParser) parser).DoQualIdent (_1);
                    :}
    ;
