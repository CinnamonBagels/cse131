
import java_cup.runtime.*;
import java.util.Vector;

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

parser code 
{:
:};

scan with {: return new Symbol (sym.EOF); :};

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

terminal
    T_AMPERSAND,
    T_AND,
    T_ARROW,
    T_ASSIGN,
    T_BAR,
    T_BOOL,
    T_BREAK,
    T_CARET,
    T_CIN,
    T_COLON,
    T_COLONCOLON,
    T_COMMA,
    T_CONST,
    T_CONTINUE,
    T_COUT,
    T_DOT,
    T_ELSE,
    T_ENDL,
    T_EQU,
    T_EXIT,
    T_EXTERN,
    T_FALSE,
    T_FLOAT,
    T_FOREACH,
    T_FUNCPTR,
    T_FUNCTION,
    T_GT,
    T_GTE,
    T_IF,
    T_INT,
    T_ISTREAM,
    T_LBRACE,
    T_LBRACKET,
    T_LPAREN,
    T_LT,
    T_LTE,
    T_MINUS,
    T_MINUSMINUS,
    T_MOD,
    T_NEQ,
    T_NOT,
    T_NULLPTR,
    T_OR,
    T_OSTREAM,
    T_PLUS,
    T_PLUSPLUS,
    T_RBRACE,
    T_RBRACKET,
    T_RETURN,
    T_RPAREN,
    T_SEMI,
    T_SIZEOF,
    T_SLASH,
    T_STAR,
    T_STATIC,
    T_STRUCTDEF,
    T_THIS,
    T_TRUE,
    T_TYPEDEF,
    T_WHILE,
    T_VOID,
    T_NEW,
    T_DELETE
    ;

terminal String
    T_FLOAT_LITERAL,
    T_INT_LITERAL,
    T_STR_LITERAL,
    T_ID_U,
    T_ID
    ;


//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

non terminal    
    Program,
    OptGlobalDecls,
    GlobalDecls,
    GlobalDecl,
    FuncDef,
    FuncDecl,
    ExternDecl,
    VarDecl,
    ConstDecl,
    OptStatic,
    TypedefDecl,
    OptRef,
    FieldsList,
    FieldList,
    OptStmtList,
    StmtList,
    Stmt,
    CodeBlock,
    OptExprList,
    IfStmt,
    OptElse,
    ForeachStmt,
    WhileStmt,
    BreakStmt,
    ContinueStmt,
    ExitStmt,
    ReturnStmt,
    ReadStmt,
    WriteStmt,
    NewStmt,
    DeleteStmt,
    WritePairList,
    WritePair,
    ConstExpr,
    ExprList,
    UnarySign,
    Equality,
    Relation,
    OptInit,
    OptModifierList,
    ModifierList,
    Modifier,
    OptArrayDef
    ;

non terminal String
    ParamDecl,
    IterationVarDecl
    ;

non terminal STO
    Expr,
    Expr0,
    Expr1,
    Expr2,
    Expr3,
    Expr4,
    Expr5,
    Expr6,
    Expr7,
    Expr8,
    Designator,
    Designator2,
    Designator3,
    QualIdent
    ;

non terminal Type
    BasicType,
    SubType,
    Type,
    UndecoratedType,
    ReturnType
    ;
    	
non terminal Vector
    IdList,
    IdListUpper,
    IdListWOptInit,
    IdListWInit,
    OptParamList,
    ParamList
    ;

non terminal BinaryOp
	AddOp,
	MulOp,
	IncDecOp
	;
	
//--------------------------------------------------------------------
//
//--------------------------------------------------------------------

Program ::=    {:
                         ((MyParser) parser).DoProgramStart(); 
                    :}
                    OptGlobalDecls
                    {:
                         ((MyParser) parser).DoProgramEnd();
                    :}
    ;

OptGlobalDecls ::=  GlobalDecls
    |                     /* empty */
    ;

GlobalDecls ::= GlobalDecl
    |               GlobalDecls GlobalDecl
    ;


GlobalDecl ::=  ExternDecl
    |               VarDecl
    |               ConstDecl
    |               TypedefDecl
    |               FuncDecl
    |               FuncDef
    ;

ExternDecl ::= T_EXTERN UndecoratedType IdList:_3 T_SEMI
                    {:
                         ((MyParser) parser).DoExternDecl (_3);
                    :}
    ;

VarDecl ::=     OptStatic UndecoratedType IdListWOptInit:_3 T_SEMI
                    {:
                         ((MyParser) parser).DoVarDecl (_3);
                    :}
    ;

ConstDecl ::=  OptStatic T_CONST UndecoratedType IdListWInit:_3 T_SEMI
                    {:
                        ((MyParser) parser).DoConstDecl (_3);
                    :}
    ;


OptStatic ::=   T_STATIC
    |               /* empty */
    ;


TypedefDecl ::=     T_TYPEDEF Type IdListUpper:_2 T_SEMI
                    {:
                        ((MyParser) parser).DoTypedefDecl (_2);
                    :}
    |               T_STRUCTDEF T_ID_U:_1 T_LBRACE
                    {:
                        ((MyParser) parser).DoBlockOpen();
                    :}
                    FieldsList T_RBRACE T_SEMI
                    {:
                         ((MyParser) parser).DoBlockClose();
                         ((MyParser) parser).DoStructdefDecl (_1);
                    :}
    ;


FieldsList ::=   FieldList
    |               FieldsList FieldList
    ;


FieldList ::=     UndecoratedType IdList T_SEMI
    |               FuncDef
    ;


FuncDef ::=    T_FUNCTION T_COLON ReturnType OptRef T_ID:_2
                    {:
                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_2);
                    :}
                    T_LPAREN OptParamList:_3 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_3);
                    :}
                    T_LBRACE OptStmtList T_RBRACE
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


FuncDecl ::=   T_EXTERN T_FUNCTION T_COLON ReturnType T_ID:_2
                    {:
                        ((MyParser) parser).DoFuncDecl_1(_2);
                    :}
                    T_LPAREN OptParamList:_3 T_RPAREN
                    {:
                        ((MyParser) parser).DoFormalParams(_3);
                    :}
                    T_SEMI
                    {:
                        ((MyParser) parser).DoFuncDecl_2();
                    :}
    ;


Type ::=         SubType OptModifierList OptArrayDef
    |               T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList:_3 T_RPAREN
    ;

UndecoratedType ::= SubType
    |               T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList:_3 T_RPAREN
    ;

SubType ::=         QualIdent
    |               BasicType
    ;

BasicType ::=       T_INT 
    |               T_FLOAT
    |               T_BOOL
    ;


OptModifierList ::= ModifierList
    |               /* empty */
    ;


ModifierList ::=    Modifier
    |               ModifierList Modifier
    ;


Modifier ::=        T_STAR
    ;


OptArrayDef ::=     T_LBRACKET ConstExpr T_RBRACKET
    |               /* empty */
    ;


ReturnType ::=      SubType OptModifierList
                    {:
                        // You should determine the type and return it here
                        RESULT = null;
                    :}
    |               T_VOID
    ;


CodeBlock ::=       T_LBRACE
                    {: ((MyParser) parser).DoBlockOpen(); :}
                    OptStmtList
		    {: ((MyParser) parser).DoBlockClose(); :}
                    T_RBRACE
    ;


OptStmtList ::=     StmtList
    |               /* empty */
    ;


StmtList ::=        Stmt
    |               StmtList Stmt
    ;


Stmt ::=        VarDecl
    |               ConstDecl
    |               TypedefDecl
    |               CodeBlock
    |               Expr T_SEMI
    |               IfStmt
    |               WhileStmt
    |               ForeachStmt
    |               BreakStmt
    |               ContinueStmt
    |               ExitStmt
    |               ReturnStmt
    |               ReadStmt
    |               WriteStmt
    |				NewStmt
    |				DeleteStmt
    ;


OptParamList ::=    ParamList:_1
    |               /* empty */
    ;


ParamList ::=       ParamDecl
    |               ParamList:_1 T_COMMA ParamDecl
    ;


ParamDecl ::=       Type OptRef T_ID
    ;


OptRef ::=          T_AMPERSAND
    |               /* empty */
    ;


IdList ::=          OptModifierList OptArrayDef T_ID:_1
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    :}
    |               IdList:_1 T_COMMA OptModifierList OptArrayDef T_ID:_3
                    {:
                        RESULT = _1;
                        RESULT.addElement (_3);
                    :}
    ;


IdListUpper ::=     T_ID_U:_1
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    :}
    |               IdListUpper:_1 T_COMMA T_ID_U:_3
                    {:
                        RESULT = _1;
                        RESULT.addElement (_3);
                    :}
    ;


IdListWOptInit ::=  OptModifierList OptArrayDef T_ID:_1 OptInit
                    {:
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    :}
    |               IdListWOptInit:_1 T_COMMA OptModifierList OptArrayDef T_ID:_3 OptInit
                    {:
                        RESULT = _1;
                        RESULT.addElement (_3);
                    :}
    ;

IdListWInit ::=     OptModifierList OptArrayDef T_ID:_1 T_ASSIGN ConstExpr
                    {:
			RESULT = new Vector ();
			RESULT.addElement (_1);
                    :}
  //|       Do not need an extra rule since we are not doing constant arrays
    |               IdListWInit:_1 T_COMMA OptModifierList OptArrayDef T_ID:_3 T_ASSIGN ConstExpr
                    {:
			RESULT = _1;
			RESULT.addElement (_3);
		    :}
    ;


OptInit ::=         T_ASSIGN Expr
    |               /* empty */
    ;

IfStmt ::=          T_IF Expr CodeBlock OptElse
    ;


OptElse ::=         T_ELSE CodeBlock
    |               /* empty */
    ;


WhileStmt ::=       T_WHILE Expr CodeBlock
    ;


IterationVarDecl ::= Type OptRef T_ID:_1
                    {:
                        RESULT = _1;
                    :}
    ;
 
ForeachStmt ::=     T_FOREACH T_LPAREN IterationVarDecl:_1 T_COLON Expr T_RPAREN
                    {:
                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).DoIterationVarDecl (_1);
                    :}
                    CodeBlock
                    {:
                        ((MyParser) parser).DoBlockClose();
                    :}
    ;


BreakStmt ::=       T_BREAK T_SEMI
    ;


ContinueStmt ::=    T_CONTINUE T_SEMI
    ;


ExitStmt ::=        T_EXIT T_LPAREN Expr T_RPAREN T_SEMI
    ;


ReturnStmt ::=   T_RETURN T_SEMI
    |               T_RETURN Expr T_SEMI
    ;


ReadStmt ::=        T_CIN T_ISTREAM Designator T_SEMI
    ;


WriteStmt ::=       T_COUT T_OSTREAM WritePairList T_SEMI
    ;

NewStmt ::=       T_NEW Designator T_SEMI
    ;

DeleteStmt ::=    T_DELETE Designator T_SEMI
    ;

UnarySign ::= 	  T_PLUS
	|			  T_MINUS
	;
    
WritePairList ::=   WritePair
    |               WritePairList T_OSTREAM WritePair
    ;


WritePair ::=    Expr
    |               T_ENDL
    ;


ConstExpr ::=    Expr
    ;


OptExprList ::=     ExprList
    |               /* empty */
    ;


ExprList ::=     Expr
    |               ExprList T_COMMA Expr
    ;


Expr ::=         Designator:_1 T_ASSIGN Expr
                    {:
                        ((MyParser) parser).DoAssignExpr (_1);
                    :}
    |               Expr0:_1
                    {:
			RESULT = _1;
                    :}
    ;


Expr0 ::=        Expr0:_1 T_OR Expr1:_2
                    {:
			RESULT = ((MyParser) parser).DoBinaryOp (_1, new OrOp(), _2);
                    :}
    |               Expr1:_1
                    {:
			RESULT = _1;
                    :}
    ;


Expr1 ::=        Expr1:_1 T_AND Expr2
                    {:
			RESULT = ((MyParser) parser).DoBinaryOp (_1, new AndOp(), _2);
                    :}
    |               Expr2:_1
                    {:
			RESULT = _1;
                    :}
    ;


Expr2 ::=        Expr2:_1 T_BAR Expr3
                    {:
			RESULT = _1;
                    :}
    |               Expr3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr3 ::=        Expr3:_1 T_CARET Expr4
                    {:
			RESULT = _1;
                    :}
    |               Expr4:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr4 ::=        Expr4:_1 T_AMPERSAND Expr5
                    {:
			RESULT = _1;
                    :}
    |               Expr5:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr5 ::=           Expr5:_1 Equality Expr6
                    {:
                        RESULT = _1;
                    :}
    |               Expr6:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr6 ::=           Expr6:_1 Relation Expr7
                    {:
                        RESULT = _1;
                    :}
    |               Expr7:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr7 ::=           Expr7:_1 AddOp:_2 Expr8:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryOp(_1,_2,_3);
                    :}
    |               Expr8:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Expr8 ::=        Expr8:_1 MulOp:_2 Designator:_3
                    {:
                        RESULT = ((MyParser) parser).DoBinaryOp(_1,_2,_3);
                    :}
    |               Designator:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Equality ::=     T_EQU
    |               T_NEQ
    ;


Relation ::=     T_LT
    |               T_GT
    |               T_LTE
    |               T_GTE
    ;


AddOp ::=       T_PLUS
                    {:
                        RESULT = new AddOp();
                    :}
    |               T_MINUS
                    {:
                        RESULT = new MinusOp();
                    :}
    ;


MulOp ::=       T_STAR
                    {:
                        RESULT = new MulOp();
                    :}
    |               T_SLASH
                    {:
                        RESULT = new DivOp();
                    :}
    |               T_MOD
                    {:
                        RESULT = new ModOp();
                    :}
    ;


IncDecOp ::=        T_PLUSPLUS
                    {:
                        RESULT = new IncOp();
                    :}
    |               T_MINUSMINUS
                    {:
                        RESULT = new DecOp();
                    :}
    ;


Designator ::= T_STAR Designator:_1
                    {:
			RESULT = _1;
                    :}
    |               T_AMPERSAND Designator:_1
                    {:
			RESULT = _1;
                    :}
    |               UnarySign Designator:_1
                    {:
			RESULT = _1;
                    :}
    |               T_NOT Designator:_1
                    {:
			RESULT = _1;
                    :}
    |               T_SIZEOF T_LPAREN Designator:_2 T_RPAREN
                    {:
			RESULT = new ConstSTO("sizeof variable - fix me");
                    :}
    |               T_SIZEOF T_LPAREN Type:_2 T_RPAREN
                    {:
			RESULT = new ConstSTO("sizeof type - fix me");
                    :}
    |               T_LPAREN Type T_RPAREN Designator:_2
                    {:
			RESULT = _2;
                    :}
    |               IncDecOp:_1 Designator:_2
                    {:
			RESULT = ((MyParser) parser).DoUnaryOp(_1,_2,"pre");
                    :}
    |               Designator2:_1 
                    {:
                        RESULT = _1;
                    :}
    ;


Designator2 ::=     Designator2:_1 T_DOT T_ID:_3
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    :}
    |               Designator2:_1 T_LBRACKET Expr T_RBRACKET
                    {:
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1);
                    :}
    |               Designator2:_1 T_ARROW T_ID
                    {:
                        RESULT = _1;
                    :}
    |               Designator2:_1 IncDecOp:_2
                    {:
                        RESULT = ((MyParser) parser).DoUnaryOp(_2,_1,"post");
                    :}
    |               Designator2:_1 T_LPAREN OptExprList T_RPAREN
                    {:
                        ((MyParser) parser).DoFuncCall (_1);
                        RESULT = _1;
                    :}
    |               Designator3:_1
                    {:
                        RESULT = _1;
                    :}
    ;


Designator3 ::=     T_LPAREN Expr:_2 T_RPAREN
                    {:
                        RESULT = _2;
                    :}
    |               T_INT_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1, new IntegerType(Integer.valueOf(_1)));
                    :}
    |               T_FLOAT_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1, new FloatType(Float.valueOf(_1)));
                    :}
    |               T_STR_LITERAL:_1
                    {:
                        RESULT = new ConstSTO (_1);
                    :}
    |               T_TRUE
                    {:
                        RESULT = new ConstSTO ("true", new BooleanType());
                    :}
    |               T_FALSE
                    {:
                        RESULT = new ConstSTO ("false", new BooleanType());
                    :}
    |               T_NULLPTR
                    {:
                        RESULT = new ConstSTO ("nullptr");
                    :}
    |               T_THIS
                    {:
                        RESULT = new ConstSTO ("this");
                    :}
    |               T_COLONCOLON T_ID:_1
                    {:
                    	//global
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1, true);
                    :}
    |               T_ID:_1
                    {:
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1, false);
                    :}
    ;


QualIdent ::=       T_ID_U:_1
                    {:
                       RESULT = ((MyParser) parser).DoQualIdent (_1);
                    :}
    ;
