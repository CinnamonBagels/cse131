
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Oct 07 00:41:52 PDT 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Tue Oct 07 00:41:52 PDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\255\000\002\114\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\011\006\000\002\012\006\000\002\013" +
    "\007\000\002\014\003\000\002\014\002\000\002\015\006" +
    "\000\002\115\002\000\002\015\011\000\002\017\003\000" +
    "\002\017\004\000\002\020\005\000\002\020\003\000\002" +
    "\116\002\000\002\117\002\000\002\007\017\000\002\120" +
    "\002\000\002\121\002\000\002\010\015\000\002\103\005" +
    "\000\002\103\011\000\002\104\003\000\002\104\011\000" +
    "\002\102\003\000\002\102\003\000\002\101\003\000\002" +
    "\101\003\000\002\101\003\000\002\052\003\000\002\052" +
    "\002\000\002\053\003\000\002\053\004\000\002\054\003" +
    "\000\002\055\005\000\002\055\002\000\002\105\004\000" +
    "\002\105\003\000\002\122\002\000\002\123\002\000\002" +
    "\024\007\000\002\021\003\000\002\021\002\000\002\022" +
    "\003\000\002\022\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\004\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\023" +
    "\003\000\002\023\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\112\003\000\002\112\002\000" +
    "\002\113\003\000\002\113\005\000\002\061\005\000\002" +
    "\016\003\000\002\016\002\000\002\106\005\000\002\106" +
    "\007\000\002\107\003\000\002\107\005\000\002\110\006" +
    "\000\002\110\010\000\002\111\007\000\002\111\011\000" +
    "\002\051\004\000\002\051\002\000\002\026\006\000\002" +
    "\027\004\000\002\027\002\000\002\031\005\000\002\062" +
    "\005\000\002\124\002\000\002\030\012\000\002\032\004" +
    "\000\002\033\004\000\002\034\007\000\002\035\004\000" +
    "\002\035\005\000\002\036\006\000\002\037\006\000\002" +
    "\040\005\000\002\041\005\000\002\042\003\000\002\042" +
    "\005\000\002\043\003\000\002\043\003\000\002\044\003" +
    "\000\002\025\003\000\002\025\002\000\002\045\003\000" +
    "\002\045\005\000\002\063\005\000\002\063\003\000\002" +
    "\064\005\000\002\064\003\000\002\065\005\000\002\065" +
    "\003\000\002\066\005\000\002\066\003\000\002\067\005" +
    "\000\002\067\003\000\002\070\005\000\002\070\003\000" +
    "\002\071\005\000\002\071\003\000\002\072\005\000\002" +
    "\072\003\000\002\073\005\000\002\073\003\000\002\074" +
    "\005\000\002\074\003\000\002\047\003\000\002\047\003" +
    "\000\002\050\003\000\002\050\003\000\002\050\003\000" +
    "\002\050\003\000\002\056\003\000\002\056\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\003\000\002\060" +
    "\003\000\002\060\003\000\002\075\004\000\002\075\004" +
    "\000\002\075\004\000\002\075\004\000\002\075\006\000" +
    "\002\075\006\000\002\075\006\000\002\075\004\000\002" +
    "\075\003\000\002\076\005\000\002\076\006\000\002\076" +
    "\005\000\002\076\004\000\002\076\006\000\002\076\003" +
    "\000\002\077\005\000\002\077\003\000\002\077\003\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\003\000\002\077\003\000\002\077\004\000\002\077" +
    "\003\000\002\100\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\032\002\001\011\001\020\001\030\001\032" +
    "\001\034\001\035\001\041\001\072\001\073\001\076\001" +
    "\106\001\001\002\000\004\002\u013a\001\002\000\032\002" +
    "\ufffd\011\ufff0\020\ufff0\030\007\032\ufff0\034\ufff0\035\010" +
    "\041\ufff0\072\014\073\011\076\024\106\ufff0\001\002\000" +
    "\032\002\ufff6\011\ufff6\020\ufff6\030\ufff6\032\ufff6\034\ufff6" +
    "\035\ufff6\041\ufff6\072\ufff6\073\ufff6\076\ufff6\106\ufff6\001" +
    "\002\000\016\011\033\032\034\034\236\035\u012e\041\035" +
    "\106\031\001\002\000\004\015\324\001\002\000\004\106" +
    "\301\001\002\000\016\011\033\020\237\032\034\034\236" +
    "\041\035\106\031\001\002\000\032\002\ufff9\011\ufff9\020" +
    "\ufff9\030\ufff9\032\ufff9\034\ufff9\035\ufff9\041\ufff9\072\ufff9" +
    "\073\ufff9\076\ufff9\106\ufff9\001\002\000\016\011\ufff1\020" +
    "\ufff1\032\ufff1\034\ufff1\041\ufff1\106\ufff1\001\002\000\032" +
    "\002\ufffc\011\ufffc\020\ufffc\030\ufffc\032\ufffc\034\ufffc\035" +
    "\ufffc\041\ufffc\072\ufffc\073\ufffc\076\ufffc\106\ufffc\001\002" +
    "\000\032\002\ufff7\011\ufff7\020\ufff7\030\ufff7\032\ufff7\034" +
    "\ufff7\035\ufff7\041\ufff7\072\ufff7\073\ufff7\076\ufff7\106\ufff7" +
    "\001\002\000\032\002\ufff5\011\ufff5\020\ufff5\030\ufff5\032" +
    "\ufff5\034\ufff5\035\ufff5\041\ufff5\072\ufff5\073\ufff5\076\ufff5" +
    "\106\ufff5\001\002\000\032\002\ufffe\011\ufff0\020\ufff0\030" +
    "\007\032\ufff0\034\ufff0\035\010\041\ufff0\072\014\073\011" +
    "\076\024\106\ufff0\001\002\000\032\002\ufffa\011\ufffa\020" +
    "\ufffa\030\ufffa\032\ufffa\034\ufffa\035\ufffa\041\ufffa\072\ufffa" +
    "\073\ufffa\076\ufffa\106\ufffa\001\002\000\004\002\000\001" +
    "\002\000\032\002\ufff8\011\ufff8\020\ufff8\030\ufff8\032\ufff8" +
    "\034\ufff8\035\ufff8\041\ufff8\072\ufff8\073\ufff8\076\ufff8\106" +
    "\ufff8\001\002\000\014\011\033\032\034\034\032\041\035" +
    "\106\031\001\002\000\020\004\uffde\044\uffde\045\uffde\065" +
    "\uffde\071\uffde\106\uffde\107\uffde\001\002\000\004\106\226" +
    "\001\002\000\020\004\uffdd\044\uffdd\045\uffdd\065\uffdd\071" +
    "\uffdd\106\uffdd\107\uffdd\001\002\000\016\004\uffd8\044\uffd8" +
    "\065\uffd8\071\060\106\uffd8\107\uffd8\001\002\000\020\004" +
    "\uff55\044\uff55\045\uff55\065\uff55\071\uff55\106\uff55\107\uff55" +
    "\001\002\000\004\015\036\001\002\000\020\004\uffda\044" +
    "\uffda\045\uffda\065\uffda\071\uffda\106\uffda\107\uffda\001\002" +
    "\000\020\004\uffdb\044\uffdb\045\uffdb\065\uffdb\071\uffdb\106" +
    "\uffdb\107\uffdb\001\002\000\020\004\uffdc\044\uffdc\045\uffdc" +
    "\065\uffdc\071\uffdc\106\uffdc\107\uffdc\001\002\000\014\011" +
    "\033\032\034\041\035\100\041\106\031\001\002\000\012" +
    "\004\uffd8\045\uffd8\071\060\107\uffd8\001\002\000\006\004" +
    "\042\045\uffb3\001\002\000\010\004\uffd1\045\uffd1\107\uffd1" +
    "\001\002\000\006\045\uffb4\107\uffb4\001\002\000\004\045" +
    "\044\001\002\000\016\011\033\032\034\034\032\041\035" +
    "\065\uffb8\106\031\001\002\000\006\004\042\107\uffb3\001" +
    "\002\000\006\017\052\065\uffb9\001\002\000\006\017\uffb7" +
    "\065\uffb7\001\002\000\004\065\051\001\002\000\012\004" +
    "\uffe1\065\uffe1\106\uffe1\107\uffe1\001\002\000\014\011\033" +
    "\032\034\034\032\041\035\106\031\001\002\000\006\017" +
    "\uffb6\065\uffb6\001\002\000\004\107\055\001\002\000\006" +
    "\017\uffb5\065\uffb5\001\002\000\020\004\uffd7\044\uffd7\045" +
    "\uffd7\065\uffd7\071\uffd7\106\uffd7\107\uffd7\001\002\000\020" +
    "\004\uffd9\044\uffd9\045\uffd9\065\uffd9\071\060\106\uffd9\107" +
    "\uffd9\001\002\000\020\004\uffd5\044\uffd5\045\uffd5\065\uffd5" +
    "\071\uffd5\106\uffd5\107\uffd5\001\002\000\010\004\uffd2\045" +
    "\uffd2\107\uffd2\001\002\000\020\004\uffd6\044\uffd6\045\uffd6" +
    "\065\uffd6\071\uffd6\106\uffd6\107\uffd6\001\002\000\014\004" +
    "\uffd3\044\064\065\uffd3\106\uffd3\107\uffd3\001\002\000\042" +
    "\004\115\016\123\031\111\045\117\051\120\054\106\055" +
    "\124\061\110\067\113\071\125\074\105\075\101\103\122" +
    "\104\107\105\071\107\114\001\002\000\012\004\uffe2\065" +
    "\uffe2\106\uffe2\107\uffe2\001\002\000\056\004\uff7e\005\uff7e" +
    "\010\uff7e\013\uff7e\017\uff7e\026\uff7e\036\uff7e\037\uff7e\043" +
    "\uff7e\046\uff7e\047\uff7e\050\uff7e\052\177\053\uff7e\056\uff7e" +
    "\057\uff7e\060\uff7e\063\uff7e\065\uff7e\066\uff7e\070\201\071" +
    "\200\001\002\000\060\004\uff7c\005\uff7c\007\224\010\uff7c" +
    "\013\uff7c\017\uff7c\026\uff7c\036\uff7c\037\uff7c\043\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\052\uff7c\053\uff7c\056\uff7c\057\uff7c" +
    "\060\uff7c\063\uff7c\065\uff7c\066\uff7c\070\uff7c\071\uff7c\001" +
    "\002\000\050\004\uff80\005\uff80\010\uff80\013\uff80\017\uff80" +
    "\026\uff80\036\uff80\037\uff80\043\uff80\046\uff80\047\uff80\050" +
    "\173\053\uff80\056\uff80\057\uff80\060\174\063\uff80\065\uff80" +
    "\066\uff80\001\002\000\074\004\uff5c\005\uff5c\006\uff5c\007" +
    "\uff5c\010\uff5c\013\uff5c\017\uff5c\023\uff5c\026\uff5c\036\uff5c" +
    "\037\uff5c\043\uff5c\044\uff5c\045\uff5c\046\uff5c\047\uff5c\050" +
    "\uff5c\051\uff5c\052\uff5c\053\uff5c\056\uff5c\057\uff5c\060\uff5c" +
    "\061\uff5c\063\uff5c\065\uff5c\066\uff5c\070\uff5c\071\uff5c\001" +
    "\002\000\044\004\uff82\005\uff82\010\uff82\013\uff82\017\uff82" +
    "\026\uff82\036\171\037\165\043\uff82\046\167\047\166\053" +
    "\uff82\056\uff82\057\uff82\063\uff82\065\uff82\066\uff82\001\002" +
    "\000\034\004\uff84\005\uff84\010\uff84\013\uff84\017\uff84\026" +
    "\163\043\uff84\053\162\056\uff84\057\uff84\063\uff84\065\uff84" +
    "\066\uff84\001\002\000\074\004\uff60\005\uff60\006\uff60\007" +
    "\uff60\010\uff60\013\uff60\017\uff60\023\uff60\026\uff60\036\uff60" +
    "\037\uff60\043\uff60\044\uff60\045\uff60\046\uff60\047\uff60\050" +
    "\uff60\051\uff60\052\uff60\053\uff60\056\uff60\057\uff60\060\uff60" +
    "\061\uff60\063\uff60\065\uff60\066\uff60\070\uff60\071\uff60\001" +
    "\002\000\074\004\uff66\005\uff66\006\210\007\uff66\010\uff66" +
    "\013\uff66\017\uff66\023\211\026\uff66\036\uff66\037\uff66\043" +
    "\uff66\044\205\045\206\046\uff66\047\uff66\050\uff66\051\120" +
    "\052\uff66\053\uff66\056\uff66\057\uff66\060\uff66\061\110\063" +
    "\uff66\065\uff66\066\uff66\070\uff66\071\uff66\001\002\000\030" +
    "\004\157\005\uff86\010\uff86\013\uff86\017\uff86\043\uff86\056" +
    "\uff86\057\uff86\063\uff86\065\uff86\066\uff86\001\002\000\004" +
    "\063\204\001\002\000\026\005\uff88\010\uff88\013\155\017" +
    "\uff88\043\uff88\056\uff88\057\uff88\063\uff88\065\uff88\066\uff88" +
    "\001\002\000\074\004\uff5b\005\uff5b\006\uff5b\007\uff5b\010" +
    "\uff5b\013\uff5b\017\uff5b\023\uff5b\026\uff5b\036\uff5b\037\uff5b" +
    "\043\uff5b\044\uff5b\045\uff5b\046\uff5b\047\uff5b\050\uff5b\051" +
    "\uff5b\052\uff5b\053\uff5b\056\uff5b\057\uff5b\060\uff5b\061\uff5b" +
    "\063\uff5b\065\uff5b\066\uff5b\070\uff5b\071\uff5b\001\002\000" +
    "\024\005\uff8a\010\153\017\uff8a\043\uff8a\056\uff8a\057\uff8a" +
    "\063\uff8a\065\uff8a\066\uff8a\001\002\000\022\005\151\017" +
    "\uff8c\043\uff8c\056\uff8c\057\uff8c\063\uff8c\065\uff8c\066\uff8c" +
    "\001\002\000\020\017\uff8e\043\uff8e\056\146\057\uff8e\063" +
    "\uff8e\065\uff8e\066\uff8e\001\002\000\074\004\uff58\005\uff58" +
    "\006\uff58\007\uff58\010\uff58\013\uff58\017\uff58\023\uff58\026" +
    "\uff58\036\uff58\037\uff58\043\uff58\044\uff58\045\uff58\046\uff58" +
    "\047\uff58\050\uff58\051\uff58\052\uff58\053\uff58\056\uff58\057" +
    "\uff58\060\uff58\061\uff58\063\uff58\065\uff58\066\uff58\070\uff58" +
    "\071\uff58\001\002\000\042\004\115\016\123\031\111\045" +
    "\117\051\120\054\106\055\124\061\110\067\113\071\125" +
    "\074\105\075\101\103\122\104\107\105\071\107\114\001" +
    "\002\000\074\004\uff5e\005\uff5e\006\uff5e\007\uff5e\010\uff5e" +
    "\013\uff5e\017\uff5e\023\uff5e\026\uff5e\036\uff5e\037\uff5e\043" +
    "\uff5e\044\uff5e\045\uff5e\046\uff5e\047\uff5e\050\uff5e\051\uff5e" +
    "\052\uff5e\053\uff5e\056\uff5e\057\uff5e\060\uff5e\061\uff5e\063" +
    "\uff5e\065\uff5e\066\uff5e\070\uff5e\071\uff5e\001\002\000\122" +
    "\004\uff70\005\uff70\006\uff70\007\uff70\010\uff70\013\uff70\016" +
    "\uff70\017\uff70\023\uff70\026\uff70\031\uff70\036\uff70\037\uff70" +
    "\043\uff70\044\uff70\045\uff70\046\uff70\047\uff70\050\uff70\051" +
    "\uff70\052\uff70\053\uff70\054\uff70\055\uff70\056\uff70\057\uff70" +
    "\060\uff70\061\uff70\063\uff70\065\uff70\066\uff70\067\uff70\070" +
    "\uff70\071\uff70\074\uff70\075\uff70\103\uff70\104\uff70\105\uff70" +
    "\107\uff70\001\002\000\074\004\uff5a\005\uff5a\006\uff5a\007" +
    "\uff5a\010\uff5a\013\uff5a\017\uff5a\023\uff5a\026\uff5a\036\uff5a" +
    "\037\uff5a\043\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050" +
    "\uff5a\051\uff5a\052\uff5a\053\uff5a\056\uff5a\057\uff5a\060\uff5a" +
    "\061\uff5a\063\uff5a\065\uff5a\066\uff5a\070\uff5a\071\uff5a\001" +
    "\002\000\010\017\uff94\063\uff94\066\uff94\001\002\000\004" +
    "\045\140\001\002\000\074\004\uff56\005\uff56\006\uff56\007" +
    "\uff56\010\uff56\013\uff56\017\uff56\023\uff56\026\uff56\036\uff56" +
    "\037\uff56\043\uff56\044\uff56\045\uff56\046\uff56\047\uff56\050" +
    "\uff56\051\uff56\052\uff56\053\uff56\056\uff56\057\uff56\060\uff56" +
    "\061\uff56\063\uff56\065\uff56\066\uff56\070\uff56\071\uff56\001" +
    "\002\000\042\004\115\016\123\031\111\045\117\051\120" +
    "\054\106\055\124\061\110\067\113\071\125\074\105\075" +
    "\101\103\122\104\107\105\071\107\114\001\002\000\042" +
    "\004\115\016\123\031\111\045\117\051\120\054\106\055" +
    "\124\061\110\067\113\071\125\074\105\075\101\103\122" +
    "\104\107\105\071\107\114\001\002\000\054\004\115\011" +
    "\033\016\123\031\111\032\034\034\032\041\035\045\117" +
    "\051\120\054\106\055\124\061\110\067\113\071\125\074" +
    "\105\075\101\103\122\104\107\105\071\106\031\107\114" +
    "\001\002\000\122\004\uff6f\005\uff6f\006\uff6f\007\uff6f\010" +
    "\uff6f\013\uff6f\016\uff6f\017\uff6f\023\uff6f\026\uff6f\031\uff6f" +
    "\036\uff6f\037\uff6f\043\uff6f\044\uff6f\045\uff6f\046\uff6f\047" +
    "\uff6f\050\uff6f\051\uff6f\052\uff6f\053\uff6f\054\uff6f\055\uff6f" +
    "\056\uff6f\057\uff6f\060\uff6f\061\uff6f\063\uff6f\065\uff6f\066" +
    "\uff6f\067\uff6f\070\uff6f\071\uff6f\074\uff6f\075\uff6f\103\uff6f" +
    "\104\uff6f\105\uff6f\107\uff6f\001\002\000\042\004\115\016" +
    "\123\031\111\045\117\051\120\054\106\055\124\061\110" +
    "\067\113\071\125\074\105\075\101\103\122\104\107\105" +
    "\071\107\114\001\002\000\074\004\uff5d\005\uff5d\006\uff5d" +
    "\007\uff5d\010\uff5d\013\uff5d\017\uff5d\023\uff5d\026\uff5d\036" +
    "\uff5d\037\uff5d\043\uff5d\044\uff5d\045\uff5d\046\uff5d\047\uff5d" +
    "\050\uff5d\051\uff5d\052\uff5d\053\uff5d\056\uff5d\057\uff5d\060" +
    "\uff5d\061\uff5d\063\uff5d\065\uff5d\066\uff5d\070\uff5d\071\uff5d" +
    "\001\002\000\004\107\127\001\002\000\074\004\uff59\005" +
    "\uff59\006\uff59\007\uff59\010\uff59\013\uff59\017\uff59\023\uff59" +
    "\026\uff59\036\uff59\037\uff59\043\uff59\044\uff59\045\uff59\046" +
    "\uff59\047\uff59\050\uff59\051\uff59\052\uff59\053\uff59\056\uff59" +
    "\057\uff59\060\uff59\061\uff59\063\uff59\065\uff59\066\uff59\070" +
    "\uff59\071\uff59\001\002\000\042\004\115\016\123\031\111" +
    "\045\117\051\120\054\106\055\124\061\110\067\113\071" +
    "\125\074\105\075\101\103\122\104\107\105\071\107\114" +
    "\001\002\000\060\004\uff6e\005\uff6e\007\uff6e\010\uff6e\013" +
    "\uff6e\017\uff6e\026\uff6e\036\uff6e\037\uff6e\043\uff6e\046\uff6e" +
    "\047\uff6e\050\uff6e\052\uff6e\053\uff6e\056\uff6e\057\uff6e\060" +
    "\uff6e\063\uff6e\065\uff6e\066\uff6e\070\uff6e\071\uff6e\001\002" +
    "\000\074\004\uff57\005\uff57\006\uff57\007\uff57\010\uff57\013" +
    "\uff57\017\uff57\023\uff57\026\uff57\036\uff57\037\uff57\043\uff57" +
    "\044\uff57\045\uff57\046\uff57\047\uff57\050\uff57\051\uff57\052" +
    "\uff57\053\uff57\056\uff57\057\uff57\060\uff57\061\uff57\063\uff57" +
    "\065\uff57\066\uff57\070\uff57\071\uff57\001\002\000\060\004" +
    "\uff6c\005\uff6c\007\uff6c\010\uff6c\013\uff6c\017\uff6c\026\uff6c" +
    "\036\uff6c\037\uff6c\043\uff6c\046\uff6c\047\uff6c\050\uff6c\052" +
    "\uff6c\053\uff6c\056\uff6c\057\uff6c\060\uff6c\063\uff6c\065\uff6c" +
    "\066\uff6c\070\uff6c\071\uff6c\001\002\000\004\065\135\001" +
    "\002\000\004\065\133\001\002\000\042\004\115\016\123" +
    "\031\111\045\117\051\120\054\106\055\124\061\110\067" +
    "\113\071\125\074\105\075\101\103\122\104\107\105\071" +
    "\107\114\001\002\000\060\004\uff68\005\uff68\007\uff68\010" +
    "\uff68\013\uff68\017\uff68\026\uff68\036\uff68\037\uff68\043\uff68" +
    "\046\uff68\047\uff68\050\uff68\052\uff68\053\uff68\056\uff68\057" +
    "\uff68\060\uff68\063\uff68\065\uff68\066\uff68\070\uff68\071\uff68" +
    "\001\002\000\074\004\uff5f\005\uff5f\006\uff5f\007\uff5f\010" +
    "\uff5f\013\uff5f\017\uff5f\023\uff5f\026\uff5f\036\uff5f\037\uff5f" +
    "\043\uff5f\044\uff5f\045\uff5f\046\uff5f\047\uff5f\050\uff5f\051" +
    "\uff5f\052\uff5f\053\uff5f\056\uff5f\057\uff5f\060\uff5f\061\uff5f" +
    "\063\uff5f\065\uff5f\066\uff5f\070\uff5f\071\uff5f\001\002\000" +
    "\060\004\uff67\005\uff67\007\uff67\010\uff67\013\uff67\017\uff67" +
    "\026\uff67\036\uff67\037\uff67\043\uff67\046\uff67\047\uff67\050" +
    "\uff67\052\uff67\053\uff67\056\uff67\057\uff67\060\uff67\063\uff67" +
    "\065\uff67\066\uff67\070\uff67\071\uff67\001\002\000\060\004" +
    "\uff6d\005\uff6d\007\uff6d\010\uff6d\013\uff6d\017\uff6d\026\uff6d" +
    "\036\uff6d\037\uff6d\043\uff6d\046\uff6d\047\uff6d\050\uff6d\052" +
    "\uff6d\053\uff6d\056\uff6d\057\uff6d\060\uff6d\063\uff6d\065\uff6d" +
    "\066\uff6d\070\uff6d\071\uff6d\001\002\000\054\004\115\011" +
    "\033\016\123\031\111\032\034\034\032\041\035\045\117" +
    "\051\120\054\106\055\124\061\110\067\113\071\125\074" +
    "\105\075\101\103\122\104\107\105\071\106\031\107\114" +
    "\001\002\000\004\065\144\001\002\000\004\065\143\001" +
    "\002\000\060\004\uff69\005\uff69\007\uff69\010\uff69\013\uff69" +
    "\017\uff69\026\uff69\036\uff69\037\uff69\043\uff69\046\uff69\047" +
    "\uff69\050\uff69\052\uff69\053\uff69\056\uff69\057\uff69\060\uff69" +
    "\063\uff69\065\uff69\066\uff69\070\uff69\071\uff69\001\002\000" +
    "\060\004\uff6a\005\uff6a\007\uff6a\010\uff6a\013\uff6a\017\uff6a" +
    "\026\uff6a\036\uff6a\037\uff6a\043\uff6a\046\uff6a\047\uff6a\050" +
    "\uff6a\052\uff6a\053\uff6a\056\uff6a\057\uff6a\060\uff6a\063\uff6a" +
    "\065\uff6a\066\uff6a\070\uff6a\071\uff6a\001\002\000\060\004" +
    "\uff6b\005\uff6b\007\uff6b\010\uff6b\013\uff6b\017\uff6b\026\uff6b" +
    "\036\uff6b\037\uff6b\043\uff6b\046\uff6b\047\uff6b\050\uff6b\052" +
    "\uff6b\053\uff6b\056\uff6b\057\uff6b\060\uff6b\063\uff6b\065\uff6b" +
    "\066\uff6b\070\uff6b\071\uff6b\001\002\000\042\004\115\016" +
    "\123\031\111\045\117\051\120\054\106\055\124\061\110" +
    "\067\113\071\125\074\105\075\101\103\122\104\107\105" +
    "\071\107\114\001\002\000\056\004\uff7c\005\uff7c\010\uff7c" +
    "\013\uff7c\017\uff7c\026\uff7c\036\uff7c\037\uff7c\043\uff7c\046" +
    "\uff7c\047\uff7c\050\uff7c\052\uff7c\053\uff7c\056\uff7c\057\uff7c" +
    "\060\uff7c\063\uff7c\065\uff7c\066\uff7c\070\uff7c\071\uff7c\001" +
    "\002\000\022\005\151\017\uff8d\043\uff8d\056\uff8d\057\uff8d" +
    "\063\uff8d\065\uff8d\066\uff8d\001\002\000\042\004\115\016" +
    "\123\031\111\045\117\051\120\054\106\055\124\061\110" +
    "\067\113\071\125\074\105\075\101\103\122\104\107\105" +
    "\071\107\114\001\002\000\024\005\uff8b\010\153\017\uff8b" +
    "\043\uff8b\056\uff8b\057\uff8b\063\uff8b\065\uff8b\066\uff8b\001" +
    "\002\000\042\004\115\016\123\031\111\045\117\051\120" +
    "\054\106\055\124\061\110\067\113\071\125\074\105\075" +
    "\101\103\122\104\107\105\071\107\114\001\002\000\026" +
    "\005\uff89\010\uff89\013\155\017\uff89\043\uff89\056\uff89\057" +
    "\uff89\063\uff89\065\uff89\066\uff89\001\002\000\042\004\115" +
    "\016\123\031\111\045\117\051\120\054\106\055\124\061" +
    "\110\067\113\071\125\074\105\075\101\103\122\104\107" +
    "\105\071\107\114\001\002\000\030\004\157\005\uff87\010" +
    "\uff87\013\uff87\017\uff87\043\uff87\056\uff87\057\uff87\063\uff87" +
    "\065\uff87\066\uff87\001\002\000\042\004\115\016\123\031" +
    "\111\045\117\051\120\054\106\055\124\061\110\067\113" +
    "\071\125\074\105\075\101\103\122\104\107\105\071\107" +
    "\114\001\002\000\034\004\uff85\005\uff85\010\uff85\013\uff85" +
    "\017\uff85\026\163\043\uff85\053\162\056\uff85\057\uff85\063" +
    "\uff85\065\uff85\066\uff85\001\002\000\042\004\115\016\123" +
    "\031\111\045\117\051\120\054\106\055\124\061\110\067" +
    "\113\071\125\074\105\075\101\103\122\104\107\105\071" +
    "\107\114\001\002\000\042\004\uff7a\016\uff7a\031\uff7a\045" +
    "\uff7a\051\uff7a\054\uff7a\055\uff7a\061\uff7a\067\uff7a\071\uff7a" +
    "\074\uff7a\075\uff7a\103\uff7a\104\uff7a\105\uff7a\107\uff7a\001" +
    "\002\000\042\004\uff7b\016\uff7b\031\uff7b\045\uff7b\051\uff7b" +
    "\054\uff7b\055\uff7b\061\uff7b\067\uff7b\071\uff7b\074\uff7b\075" +
    "\uff7b\103\uff7b\104\uff7b\105\uff7b\107\uff7b\001\002\000\044" +
    "\004\uff83\005\uff83\010\uff83\013\uff83\017\uff83\026\uff83\036" +
    "\171\037\165\043\uff83\046\167\047\166\053\uff83\056\uff83" +
    "\057\uff83\063\uff83\065\uff83\066\uff83\001\002\000\042\004" +
    "\uff76\016\uff76\031\uff76\045\uff76\051\uff76\054\uff76\055\uff76" +
    "\061\uff76\067\uff76\071\uff76\074\uff76\075\uff76\103\uff76\104" +
    "\uff76\105\uff76\107\uff76\001\002\000\042\004\uff77\016\uff77" +
    "\031\uff77\045\uff77\051\uff77\054\uff77\055\uff77\061\uff77\067" +
    "\uff77\071\uff77\074\uff77\075\uff77\103\uff77\104\uff77\105\uff77" +
    "\107\uff77\001\002\000\042\004\uff79\016\uff79\031\uff79\045" +
    "\uff79\051\uff79\054\uff79\055\uff79\061\uff79\067\uff79\071\uff79" +
    "\074\uff79\075\uff79\103\uff79\104\uff79\105\uff79\107\uff79\001" +
    "\002\000\042\004\115\016\123\031\111\045\117\051\120" +
    "\054\106\055\124\061\110\067\113\071\125\074\105\075" +
    "\101\103\122\104\107\105\071\107\114\001\002\000\042" +
    "\004\uff78\016\uff78\031\uff78\045\uff78\051\uff78\054\uff78\055" +
    "\uff78\061\uff78\067\uff78\071\uff78\074\uff78\075\uff78\103\uff78" +
    "\104\uff78\105\uff78\107\uff78\001\002\000\050\004\uff81\005" +
    "\uff81\010\uff81\013\uff81\017\uff81\026\uff81\036\uff81\037\uff81" +
    "\043\uff81\046\uff81\047\uff81\050\173\053\uff81\056\uff81\057" +
    "\uff81\060\174\063\uff81\065\uff81\066\uff81\001\002\000\042" +
    "\004\uff74\016\uff74\031\uff74\045\uff74\051\uff74\054\uff74\055" +
    "\uff74\061\uff74\067\uff74\071\uff74\074\uff74\075\uff74\103\uff74" +
    "\104\uff74\105\uff74\107\uff74\001\002\000\042\004\uff75\016" +
    "\uff75\031\uff75\045\uff75\051\uff75\054\uff75\055\uff75\061\uff75" +
    "\067\uff75\071\uff75\074\uff75\075\uff75\103\uff75\104\uff75\105" +
    "\uff75\107\uff75\001\002\000\042\004\115\016\123\031\111" +
    "\045\117\051\120\054\106\055\124\061\110\067\113\071" +
    "\125\074\105\075\101\103\122\104\107\105\071\107\114" +
    "\001\002\000\056\004\uff7f\005\uff7f\010\uff7f\013\uff7f\017" +
    "\uff7f\026\uff7f\036\uff7f\037\uff7f\043\uff7f\046\uff7f\047\uff7f" +
    "\050\uff7f\052\177\053\uff7f\056\uff7f\057\uff7f\060\uff7f\063" +
    "\uff7f\065\uff7f\066\uff7f\070\201\071\200\001\002\000\042" +
    "\004\uff71\016\uff71\031\uff71\045\uff71\051\uff71\054\uff71\055" +
    "\uff71\061\uff71\067\uff71\071\uff71\074\uff71\075\uff71\103\uff71" +
    "\104\uff71\105\uff71\107\uff71\001\002\000\042\004\uff73\016" +
    "\uff73\031\uff73\045\uff73\051\uff73\054\uff73\055\uff73\061\uff73" +
    "\067\uff73\071\uff73\074\uff73\075\uff73\103\uff73\104\uff73\105" +
    "\uff73\107\uff73\001\002\000\042\004\uff72\016\uff72\031\uff72" +
    "\045\uff72\051\uff72\054\uff72\055\uff72\061\uff72\067\uff72\071" +
    "\uff72\074\uff72\075\uff72\103\uff72\104\uff72\105\uff72\107\uff72" +
    "\001\002\000\042\004\115\016\123\031\111\045\117\051" +
    "\120\054\106\055\124\061\110\067\113\071\125\074\105" +
    "\075\101\103\122\104\107\105\071\107\114\001\002\000" +
    "\056\004\uff7d\005\uff7d\010\uff7d\013\uff7d\017\uff7d\026\uff7d" +
    "\036\uff7d\037\uff7d\043\uff7d\046\uff7d\047\uff7d\050\uff7d\052" +
    "\uff7d\053\uff7d\056\uff7d\057\uff7d\060\uff7d\063\uff7d\065\uff7d" +
    "\066\uff7d\070\uff7d\071\uff7d\001\002\000\012\004\uffd4\065" +
    "\uffd4\106\uffd4\107\uffd4\001\002\000\042\004\115\016\123" +
    "\031\111\045\117\051\120\054\106\055\124\061\110\067" +
    "\113\071\125\074\105\075\101\103\122\104\107\105\071" +
    "\107\114\001\002\000\044\004\115\016\123\031\111\045" +
    "\117\051\120\054\106\055\124\061\110\065\uff92\067\113" +
    "\071\125\074\105\075\101\103\122\104\107\105\071\107" +
    "\114\001\002\000\074\004\uff62\005\uff62\006\uff62\007\uff62" +
    "\010\uff62\013\uff62\017\uff62\023\uff62\026\uff62\036\uff62\037" +
    "\uff62\043\uff62\044\uff62\045\uff62\046\uff62\047\uff62\050\uff62" +
    "\051\uff62\052\uff62\053\uff62\056\uff62\057\uff62\060\uff62\061" +
    "\uff62\063\uff62\065\uff62\066\uff62\070\uff62\071\uff62\001\002" +
    "\000\004\107\213\001\002\000\004\107\212\001\002\000" +
    "\074\004\uff65\005\uff65\006\uff65\007\uff65\010\uff65\013\uff65" +
    "\017\uff65\023\uff65\026\uff65\036\uff65\037\uff65\043\uff65\044" +
    "\uff65\045\uff65\046\uff65\047\uff65\050\uff65\051\uff65\052\uff65" +
    "\053\uff65\056\uff65\057\uff65\060\uff65\061\uff65\063\uff65\065" +
    "\uff65\066\uff65\070\uff65\071\uff65\001\002\000\074\004\uff63" +
    "\005\uff63\006\uff63\007\uff63\010\uff63\013\uff63\017\uff63\023" +
    "\uff63\026\uff63\036\uff63\037\uff63\043\uff63\044\uff63\045\uff63" +
    "\046\uff63\047\uff63\050\uff63\051\uff63\052\uff63\053\uff63\056" +
    "\uff63\057\uff63\060\uff63\061\uff63\063\uff63\065\uff63\066\uff63" +
    "\070\uff63\071\uff63\001\002\000\006\017\uff91\065\uff91\001" +
    "\002\000\006\017\220\065\uff93\001\002\000\004\065\217" +
    "\001\002\000\074\004\uff61\005\uff61\006\uff61\007\uff61\010" +
    "\uff61\013\uff61\017\uff61\023\uff61\026\uff61\036\uff61\037\uff61" +
    "\043\uff61\044\uff61\045\uff61\046\uff61\047\uff61\050\uff61\051" +
    "\uff61\052\uff61\053\uff61\056\uff61\057\uff61\060\uff61\061\uff61" +
    "\063\uff61\065\uff61\066\uff61\070\uff61\071\uff61\001\002\000" +
    "\042\004\115\016\123\031\111\045\117\051\120\054\106" +
    "\055\124\061\110\067\113\071\125\074\105\075\101\103" +
    "\122\104\107\105\071\107\114\001\002\000\006\017\uff90" +
    "\065\uff90\001\002\000\004\063\223\001\002\000\074\004" +
    "\uff64\005\uff64\006\uff64\007\uff64\010\uff64\013\uff64\017\uff64" +
    "\023\uff64\026\uff64\036\uff64\037\uff64\043\uff64\044\uff64\045" +
    "\uff64\046\uff64\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64" +
    "\056\uff64\057\uff64\060\uff64\061\uff64\063\uff64\065\uff64\066" +
    "\uff64\070\uff64\071\uff64\001\002\000\042\004\115\016\123" +
    "\031\111\045\117\051\120\054\106\055\124\061\110\067" +
    "\113\071\125\074\105\075\101\103\122\104\107\105\071" +
    "\107\114\001\002\000\016\017\uff8f\043\uff8f\057\uff8f\063" +
    "\uff8f\065\uff8f\066\uff8f\001\002\000\006\017\uffb0\066\uffb0" +
    "\001\002\000\006\017\230\066\231\001\002\000\004\106" +
    "\232\001\002\000\124\002\uffef\004\uffef\011\uffef\012\uffef" +
    "\014\uffef\016\uffef\020\uffef\021\uffef\022\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\040\uffef" +
    "\041\uffef\043\uffef\045\uffef\051\uffef\054\uffef\055\uffef\061" +
    "\uffef\062\uffef\064\uffef\067\uffef\071\uffef\072\uffef\073\uffef" +
    "\074\uffef\075\uffef\076\uffef\077\uffef\101\uffef\102\uffef\103" +
    "\uffef\104\uffef\105\uffef\106\uffef\107\uffef\001\002\000\006" +
    "\017\uffaf\066\uffaf\001\002\000\032\002\ufffb\011\ufffb\020" +
    "\ufffb\030\ufffb\032\ufffb\034\ufffb\035\ufffb\041\ufffb\072\ufffb" +
    "\073\ufffb\076\ufffb\106\ufffb\001\002\000\010\044\uffd8\071" +
    "\060\107\uffd8\001\002\000\010\044\uffe0\071\uffe0\107\uffe0" +
    "\001\002\000\004\015\256\001\002\000\014\011\033\032" +
    "\034\034\236\041\035\106\031\001\002\000\010\044\uffd8" +
    "\071\060\107\uffd8\001\002\000\006\017\247\066\250\001" +
    "\002\000\006\044\064\107\uffd3\001\002\000\004\107\244" +
    "\001\002\000\004\007\245\001\002\000\042\004\115\016" +
    "\123\031\111\045\117\051\120\054\106\055\124\061\110" +
    "\067\113\071\125\074\105\075\101\103\122\104\107\105" +
    "\071\107\114\001\002\000\006\017\uffac\066\uffac\001\002" +
    "\000\010\044\uffd8\071\060\107\uffd8\001\002\000\124\002" +
    "\ufff2\004\ufff2\011\ufff2\012\ufff2\014\ufff2\016\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\040\ufff2\041\ufff2\043\ufff2\045\ufff2" +
    "\051\ufff2\054\ufff2\055\ufff2\061\ufff2\062\ufff2\064\ufff2\067" +
    "\ufff2\071\ufff2\072\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\101\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106" +
    "\ufff2\107\ufff2\001\002\000\006\044\064\107\uffd3\001\002" +
    "\000\004\107\253\001\002\000\004\007\254\001\002\000" +
    "\042\004\115\016\123\031\111\045\117\051\120\054\106" +
    "\055\124\061\110\067\113\071\125\074\105\075\101\103" +
    "\122\104\107\105\071\107\114\001\002\000\006\017\uffab" +
    "\066\uffab\001\002\000\014\011\033\032\034\041\035\100" +
    "\041\106\031\001\002\000\006\004\042\045\uffb3\001\002" +
    "\000\004\045\261\001\002\000\016\011\033\032\034\034" +
    "\032\041\035\065\uffb8\106\031\001\002\000\004\065\263" +
    "\001\002\000\010\044\uffdf\071\uffdf\107\uffdf\001\002\000" +
    "\006\044\064\107\uffd3\001\002\000\006\017\266\066\267" +
    "\001\002\000\010\044\uffd8\071\060\107\uffd8\001\002\000" +
    "\124\002\ufff3\004\ufff3\011\ufff3\012\ufff3\014\ufff3\016\ufff3" +
    "\020\ufff3\021\ufff3\022\ufff3\027\ufff3\030\ufff3\031\ufff3\032" +
    "\ufff3\033\ufff3\034\ufff3\035\ufff3\040\ufff3\041\ufff3\043\ufff3" +
    "\045\ufff3\051\ufff3\054\ufff3\055\ufff3\061\ufff3\062\ufff3\064" +
    "\ufff3\067\ufff3\071\ufff3\072\ufff3\073\ufff3\074\ufff3\075\ufff3" +
    "\076\ufff3\077\ufff3\101\ufff3\102\ufff3\103\ufff3\104\ufff3\105" +
    "\ufff3\106\ufff3\107\ufff3\001\002\000\006\044\064\107\uffd3" +
    "\001\002\000\004\107\272\001\002\000\010\007\274\017" +
    "\uffa9\066\uffa9\001\002\000\006\017\uffad\066\uffad\001\002" +
    "\000\042\004\115\016\123\031\111\045\117\051\120\054" +
    "\106\055\124\061\110\067\113\071\125\074\105\075\101" +
    "\103\122\104\107\105\071\107\114\001\002\000\006\017" +
    "\uffaa\066\uffaa\001\002\000\004\107\277\001\002\000\010" +
    "\007\274\017\uffa9\066\uffa9\001\002\000\006\017\uffae\066" +
    "\uffae\001\002\000\004\043\302\001\002\000\016\011\uffee" +
    "\032\uffee\034\uffee\035\uffee\041\uffee\106\uffee\001\002\000" +
    "\016\011\033\032\034\034\236\035\010\041\035\106\031" +
    "\001\002\000\010\044\uffd8\071\060\107\uffd8\001\002\000" +
    "\020\011\033\032\034\034\236\035\010\041\035\062\310" +
    "\106\031\001\002\000\020\011\uffec\032\uffec\034\uffec\035" +
    "\uffec\041\uffec\062\uffec\106\uffec\001\002\000\020\011\uffe9" +
    "\032\uffe9\034\uffe9\035\uffe9\041\uffe9\062\uffe9\106\uffe9\001" +
    "\002\000\004\066\312\001\002\000\020\011\uffeb\032\uffeb" +
    "\034\uffeb\035\uffeb\041\uffeb\062\uffeb\106\uffeb\001\002\000" +
    "\124\002\uffed\004\uffed\011\uffed\012\uffed\014\uffed\016\uffed" +
    "\020\uffed\021\uffed\022\uffed\027\uffed\030\uffed\031\uffed\032" +
    "\uffed\033\uffed\034\uffed\035\uffed\040\uffed\041\uffed\043\uffed" +
    "\045\uffed\051\uffed\054\uffed\055\uffed\061\uffed\062\uffed\064" +
    "\uffed\067\uffed\071\uffed\072\uffed\073\uffed\074\uffed\075\uffed" +
    "\076\uffed\077\uffed\101\uffed\102\uffed\103\uffed\104\uffed\105" +
    "\uffed\106\uffed\107\uffed\001\002\000\006\017\317\066\320" +
    "\001\002\000\006\044\064\107\uffd3\001\002\000\004\107" +
    "\316\001\002\000\006\017\uffb2\066\uffb2\001\002\000\010" +
    "\044\uffd8\071\060\107\uffd8\001\002\000\020\011\uffea\032" +
    "\uffea\034\uffea\035\uffea\041\uffea\062\uffea\106\uffea\001\002" +
    "\000\006\044\064\107\uffd3\001\002\000\004\107\323\001" +
    "\002\000\006\017\uffb1\066\uffb1\001\002\000\014\011\033" +
    "\032\034\041\035\100\041\106\031\001\002\000\006\004" +
    "\042\107\uffb3\001\002\000\004\107\327\001\002\000\004" +
    "\045\uffe8\001\002\000\004\045\331\001\002\000\016\011" +
    "\033\032\034\034\032\041\035\065\uffb8\106\031\001\002" +
    "\000\004\065\333\001\002\000\004\043\uffe7\001\002\000" +
    "\004\043\335\001\002\000\116\004\115\011\ufff0\012\366" +
    "\014\355\016\123\020\ufff0\021\343\022\342\027\362\031" +
    "\111\032\ufff0\033\370\034\ufff0\040\372\041\ufff0\043\350" +
    "\045\117\051\120\054\106\055\124\061\110\062\uffcc\064" +
    "\345\067\113\071\125\072\014\073\011\074\105\075\101" +
    "\076\024\077\340\101\351\102\341\103\122\104\107\105" +
    "\071\106\ufff0\107\114\001\002\000\116\004\uffbe\011\uffbe" +
    "\012\uffbe\014\uffbe\016\uffbe\020\uffbe\021\uffbe\022\uffbe\027" +
    "\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\040\uffbe\041\uffbe" +
    "\043\uffbe\045\uffbe\051\uffbe\054\uffbe\055\uffbe\061\uffbe\062" +
    "\uffbe\064\uffbe\067\uffbe\071\uffbe\072\uffbe\073\uffbe\074\uffbe" +
    "\075\uffbe\076\uffbe\077\uffbe\101\uffbe\102\uffbe\103\uffbe\104" +
    "\uffbe\105\uffbe\106\uffbe\107\uffbe\001\002\000\116\004\uffbf" +
    "\011\uffbf\012\uffbf\014\uffbf\016\uffbf\020\uffbf\021\uffbf\022" +
    "\uffbf\027\uffbf\031\uffbf\032\uffbf\033\uffbf\034\uffbf\040\uffbf" +
    "\041\uffbf\043\uffbf\045\uffbf\051\uffbf\054\uffbf\055\uffbf\061" +
    "\uffbf\062\uffbf\064\uffbf\067\uffbf\071\uffbf\072\uffbf\073\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\077\uffbf\101\uffbf\102\uffbf\103" +
    "\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\001\002\000\042" +
    "\004\115\016\123\031\111\045\117\051\120\054\106\055" +
    "\124\061\110\067\113\071\125\074\105\075\101\103\122" +
    "\104\107\105\071\107\114\001\002\000\042\004\115\016" +
    "\123\031\111\045\117\051\120\054\106\055\124\061\110" +
    "\067\113\071\125\074\105\075\101\103\122\104\107\105" +
    "\071\107\114\001\002\000\004\057\u0121\001\002\000\004" +
    "\066\u0120\001\002\000\116\004\uffbd\011\uffbd\012\uffbd\014" +
    "\uffbd\016\uffbd\020\uffbd\021\uffbd\022\uffbd\027\uffbd\031\uffbd" +
    "\032\uffbd\033\uffbd\034\uffbd\040\uffbd\041\uffbd\043\uffbd\045" +
    "\uffbd\051\uffbd\054\uffbd\055\uffbd\061\uffbd\062\uffbd\064\uffbd" +
    "\067\uffbd\071\uffbd\072\uffbd\073\uffbd\074\uffbd\075\uffbd\076" +
    "\uffbd\077\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105\uffbd" +
    "\106\uffbd\107\uffbd\001\002\000\044\004\115\016\123\031" +
    "\111\045\117\051\120\054\106\055\124\061\110\066\u011e" +
    "\067\113\071\125\074\105\075\101\103\122\104\107\105" +
    "\071\107\114\001\002\000\116\004\uffbc\011\uffbc\012\uffbc" +
    "\014\uffbc\016\uffbc\020\uffbc\021\uffbc\022\uffbc\027\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\040\uffbc\041\uffbc\043\uffbc" +
    "\045\uffbc\051\uffbc\054\uffbc\055\uffbc\061\uffbc\062\uffbc\064" +
    "\uffbc\067\uffbc\071\uffbc\072\uffbc\073\uffbc\074\uffbc\075\uffbc" +
    "\076\uffbc\077\uffbc\101\uffbc\102\uffbc\103\uffbc\104\uffbc\105" +
    "\uffbc\106\uffbc\107\uffbc\001\002\000\116\004\uffc3\011\uffc3" +
    "\012\uffc3\014\uffc3\016\uffc3\020\uffc3\021\uffc3\022\uffc3\027" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\040\uffc3\041\uffc3" +
    "\043\uffc3\045\uffc3\051\uffc3\054\uffc3\055\uffc3\061\uffc3\062" +
    "\uffc3\064\uffc3\067\uffc3\071\uffc3\072\uffc3\073\uffc3\074\uffc3" +
    "\075\uffc3\076\uffc3\077\uffc3\101\uffc3\102\uffc3\103\uffc3\104" +
    "\uffc3\105\uffc3\106\uffc3\107\uffc3\001\002\000\116\004\uffd0" +
    "\011\uffd0\012\uffd0\014\uffd0\016\uffd0\020\uffd0\021\uffd0\022" +
    "\uffd0\027\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\040\uffd0" +
    "\041\uffd0\043\uffd0\045\uffd0\051\uffd0\054\uffd0\055\uffd0\061" +
    "\uffd0\062\uffd0\064\uffd0\067\uffd0\071\uffd0\072\uffd0\073\uffd0" +
    "\074\uffd0\075\uffd0\076\uffd0\077\uffd0\101\uffd0\102\uffd0\103" +
    "\uffd0\104\uffd0\105\uffd0\106\uffd0\107\uffd0\001\002\000\042" +
    "\004\115\016\123\031\111\045\117\051\120\054\106\055" +
    "\124\061\110\067\113\071\125\074\105\075\101\103\122" +
    "\104\107\105\071\107\114\001\002\000\116\004\115\011" +
    "\ufff0\012\366\014\355\016\123\020\ufff0\021\343\022\342" +
    "\027\362\031\111\032\ufff0\033\370\034\ufff0\040\372\041" +
    "\ufff0\043\350\045\117\051\120\054\106\055\124\061\110" +
    "\062\uffcd\064\345\067\113\071\125\072\014\073\011\074" +
    "\105\075\101\076\024\077\340\101\351\102\341\103\122" +
    "\104\107\105\071\106\ufff0\107\114\001\002\000\116\004" +
    "\uffc6\011\uffc6\012\uffc6\014\uffc6\016\uffc6\020\uffc6\021\uffc6" +
    "\022\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\034\uffc6\040" +
    "\uffc6\041\uffc6\043\uffc6\045\uffc6\051\uffc6\054\uffc6\055\uffc6" +
    "\061\uffc6\062\uffc6\064\uffc6\067\uffc6\071\uffc6\072\uffc6\073" +
    "\uffc6\074\uffc6\075\uffc6\076\uffc6\077\uffc6\101\uffc6\102\uffc6" +
    "\103\uffc6\104\uffc6\105\uffc6\106\uffc6\107\uffc6\001\002\000" +
    "\116\004\uffbb\011\uffbb\012\uffbb\014\uffbb\016\uffbb\020\uffbb" +
    "\021\uffbb\022\uffbb\027\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\040\uffbb\041\uffbb\043\uffbb\045\uffbb\051\uffbb\054\uffbb" +
    "\055\uffbb\061\uffbb\062\uffbb\064\uffbb\067\uffbb\071\uffbb\072" +
    "\uffbb\073\uffbb\074\uffbb\075\uffbb\076\uffbb\077\uffbb\101\uffbb" +
    "\102\uffbb\103\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\001" +
    "\002\000\004\042\u0113\001\002\000\116\004\uffc4\011\uffc4" +
    "\012\uffc4\014\uffc4\016\uffc4\020\uffc4\021\uffc4\022\uffc4\027" +
    "\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\040\uffc4\041\uffc4" +
    "\043\uffc4\045\uffc4\051\uffc4\054\uffc4\055\uffc4\061\uffc4\062" +
    "\uffc4\064\uffc4\067\uffc4\071\uffc4\072\uffc4\073\uffc4\074\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\101\uffc4\102\uffc4\103\uffc4\104" +
    "\uffc4\105\uffc4\106\uffc4\107\uffc4\001\002\000\004\066\u0112" +
    "\001\002\000\116\004\uffc7\011\uffc7\012\uffc7\014\uffc7\016" +
    "\uffc7\020\uffc7\021\uffc7\022\uffc7\027\uffc7\031\uffc7\032\uffc7" +
    "\033\uffc7\034\uffc7\040\uffc7\041\uffc7\043\uffc7\045\uffc7\051" +
    "\uffc7\054\uffc7\055\uffc7\061\uffc7\062\uffc7\064\uffc7\067\uffc7" +
    "\071\uffc7\072\uffc7\073\uffc7\074\uffc7\075\uffc7\076\uffc7\077" +
    "\uffc7\101\uffc7\102\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7" +
    "\107\uffc7\001\002\000\004\062\u0111\001\002\000\004\045" +
    "\u010d\001\002\000\116\004\uffc2\011\uffc2\012\uffc2\014\uffc2" +
    "\016\uffc2\020\uffc2\021\uffc2\022\uffc2\027\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\034\uffc2\040\uffc2\041\uffc2\043\uffc2\045\uffc2" +
    "\051\uffc2\054\uffc2\055\uffc2\061\uffc2\062\uffc2\064\uffc2\067" +
    "\uffc2\071\uffc2\072\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2" +
    "\077\uffc2\101\uffc2\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106" +
    "\uffc2\107\uffc2\001\002\000\116\004\uffc9\011\uffc9\012\uffc9" +
    "\014\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9\027\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\040\uffc9\041\uffc9\043\uffc9" +
    "\045\uffc9\051\uffc9\054\uffc9\055\uffc9\061\uffc9\062\uffc9\064" +
    "\uffc9\067\uffc9\071\uffc9\072\uffc9\073\uffc9\074\uffc9\075\uffc9" +
    "\076\uffc9\077\uffc9\101\uffc9\102\uffc9\103\uffc9\104\uffc9\105" +
    "\uffc9\106\uffc9\107\uffc9\001\002\000\116\004\uffcb\011\uffcb" +
    "\012\uffcb\014\uffcb\016\uffcb\020\uffcb\021\uffcb\022\uffcb\027" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\040\uffcb\041\uffcb" +
    "\043\uffcb\045\uffcb\051\uffcb\054\uffcb\055\uffcb\061\uffcb\062" +
    "\uffcb\064\uffcb\067\uffcb\071\uffcb\072\uffcb\073\uffcb\074\uffcb" +
    "\075\uffcb\076\uffcb\077\uffcb\101\uffcb\102\uffcb\103\uffcb\104" +
    "\uffcb\105\uffcb\106\uffcb\107\uffcb\001\002\000\004\066\u010c" +
    "\001\002\000\116\004\uffc8\011\uffc8\012\uffc8\014\uffc8\016" +
    "\uffc8\020\uffc8\021\uffc8\022\uffc8\027\uffc8\031\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\040\uffc8\041\uffc8\043\uffc8\045\uffc8\051" +
    "\uffc8\054\uffc8\055\uffc8\061\uffc8\062\uffc8\064\uffc8\067\uffc8" +
    "\071\uffc8\072\uffc8\073\uffc8\074\uffc8\075\uffc8\076\uffc8\077" +
    "\uffc8\101\uffc8\102\uffc8\103\uffc8\104\uffc8\105\uffc8\106\uffc8" +
    "\107\uffc8\001\002\000\004\045\u0102\001\002\000\116\004" +
    "\uffc0\011\uffc0\012\uffc0\014\uffc0\016\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\027\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\040" +
    "\uffc0\041\uffc0\043\uffc0\045\uffc0\051\uffc0\054\uffc0\055\uffc0" +
    "\061\uffc0\062\uffc0\064\uffc0\067\uffc0\071\uffc0\072\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\101\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\001\002\000" +
    "\042\004\115\016\123\031\111\045\117\051\120\054\106" +
    "\055\124\061\110\067\113\071\125\074\105\075\101\103" +
    "\122\104\107\105\071\107\114\001\002\000\116\004\uffba" +
    "\011\uffba\012\uffba\014\uffba\016\uffba\020\uffba\021\uffba\022" +
    "\uffba\027\uffba\031\uffba\032\uffba\033\uffba\034\uffba\040\uffba" +
    "\041\uffba\043\uffba\045\uffba\051\uffba\054\uffba\055\uffba\061" +
    "\uffba\062\uffba\064\uffba\067\uffba\071\uffba\072\uffba\073\uffba" +
    "\074\uffba\075\uffba\076\uffba\077\uffba\101\uffba\102\uffba\103" +
    "\uffba\104\uffba\105\uffba\106\uffba\107\uffba\001\002\000\116" +
    "\004\uffc1\011\uffc1\012\uffc1\014\uffc1\016\uffc1\020\uffc1\021" +
    "\uffc1\022\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\040\uffc1\041\uffc1\043\uffc1\045\uffc1\051\uffc1\054\uffc1\055" +
    "\uffc1\061\uffc1\062\uffc1\064\uffc1\067\uffc1\071\uffc1\072\uffc1" +
    "\073\uffc1\074\uffc1\075\uffc1\076\uffc1\077\uffc1\101\uffc1\102" +
    "\uffc1\103\uffc1\104\uffc1\105\uffc1\106\uffc1\107\uffc1\001\002" +
    "\000\004\043\350\001\002\000\120\004\uffa6\011\uffa6\012" +
    "\uffa6\014\uffa6\016\uffa6\020\uffa6\021\uffa6\022\uffa6\024\u0100" +
    "\027\uffa6\031\uffa6\032\uffa6\033\uffa6\034\uffa6\040\uffa6\041" +
    "\uffa6\043\uffa6\045\uffa6\051\uffa6\054\uffa6\055\uffa6\061\uffa6" +
    "\062\uffa6\064\uffa6\067\uffa6\071\uffa6\072\uffa6\073\uffa6\074" +
    "\uffa6\075\uffa6\076\uffa6\077\uffa6\101\uffa6\102\uffa6\103\uffa6" +
    "\104\uffa6\105\uffa6\106\uffa6\107\uffa6\001\002\000\116\004" +
    "\uffa8\011\uffa8\012\uffa8\014\uffa8\016\uffa8\020\uffa8\021\uffa8" +
    "\022\uffa8\027\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\040" +
    "\uffa8\041\uffa8\043\uffa8\045\uffa8\051\uffa8\054\uffa8\055\uffa8" +
    "\061\uffa8\062\uffa8\064\uffa8\067\uffa8\071\uffa8\072\uffa8\073" +
    "\uffa8\074\uffa8\075\uffa8\076\uffa8\077\uffa8\101\uffa8\102\uffa8" +
    "\103\uffa8\104\uffa8\105\uffa8\106\uffa8\107\uffa8\001\002\000" +
    "\004\043\350\001\002\000\116\004\uffa7\011\uffa7\012\uffa7" +
    "\014\uffa7\016\uffa7\020\uffa7\021\uffa7\022\uffa7\027\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\034\uffa7\040\uffa7\041\uffa7\043\uffa7" +
    "\045\uffa7\051\uffa7\054\uffa7\055\uffa7\061\uffa7\062\uffa7\064" +
    "\uffa7\067\uffa7\071\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7" +
    "\076\uffa7\077\uffa7\101\uffa7\102\uffa7\103\uffa7\104\uffa7\105" +
    "\uffa7\106\uffa7\107\uffa7\001\002\000\014\011\033\032\034" +
    "\034\032\041\035\106\031\001\002\000\006\004\042\107" +
    "\uffb3\001\002\000\004\015\u0105\001\002\000\042\004\115" +
    "\016\123\031\111\045\117\051\120\054\106\055\124\061" +
    "\110\067\113\071\125\074\105\075\101\103\122\104\107" +
    "\105\071\107\114\001\002\000\004\065\u0107\001\002\000" +
    "\004\043\uffa3\001\002\000\004\043\350\001\002\000\116" +
    "\004\uffa2\011\uffa2\012\uffa2\014\uffa2\016\uffa2\020\uffa2\021" +
    "\uffa2\022\uffa2\027\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2" +
    "\040\uffa2\041\uffa2\043\uffa2\045\uffa2\051\uffa2\054\uffa2\055" +
    "\uffa2\061\uffa2\062\uffa2\064\uffa2\067\uffa2\071\uffa2\072\uffa2" +
    "\073\uffa2\074\uffa2\075\uffa2\076\uffa2\077\uffa2\101\uffa2\102" +
    "\uffa2\103\uffa2\104\uffa2\105\uffa2\106\uffa2\107\uffa2\001\002" +
    "\000\004\107\u010b\001\002\000\004\015\uffa4\001\002\000" +
    "\116\004\uffa1\011\uffa1\012\uffa1\014\uffa1\016\uffa1\020\uffa1" +
    "\021\uffa1\022\uffa1\027\uffa1\031\uffa1\032\uffa1\033\uffa1\034" +
    "\uffa1\040\uffa1\041\uffa1\043\uffa1\045\uffa1\051\uffa1\054\uffa1" +
    "\055\uffa1\061\uffa1\062\uffa1\064\uffa1\067\uffa1\071\uffa1\072" +
    "\uffa1\073\uffa1\074\uffa1\075\uffa1\076\uffa1\077\uffa1\101\uffa1" +
    "\102\uffa1\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\001" +
    "\002\000\042\004\115\016\123\031\111\045\117\051\120" +
    "\054\106\055\124\061\110\067\113\071\125\074\105\075" +
    "\101\103\122\104\107\105\071\107\114\001\002\000\004" +
    "\065\u010f\001\002\000\004\066\u0110\001\002\000\116\004" +
    "\uff9f\011\uff9f\012\uff9f\014\uff9f\016\uff9f\020\uff9f\021\uff9f" +
    "\022\uff9f\027\uff9f\031\uff9f\032\uff9f\033\uff9f\034\uff9f\040" +
    "\uff9f\041\uff9f\043\uff9f\045\uff9f\051\uff9f\054\uff9f\055\uff9f" +
    "\061\uff9f\062\uff9f\064\uff9f\067\uff9f\071\uff9f\072\uff9f\073" +
    "\uff9f\074\uff9f\075\uff9f\076\uff9f\077\uff9f\101\uff9f\102\uff9f" +
    "\103\uff9f\104\uff9f\105\uff9f\106\uff9f\107\uff9f\001\002\000" +
    "\034\002\uffe6\011\uffe6\020\uffe6\030\uffe6\032\uffe6\034\uffe6" +
    "\035\uffe6\041\uffe6\062\uffe6\072\uffe6\073\uffe6\076\uffe6\106" +
    "\uffe6\001\002\000\116\004\uffc5\011\uffc5\012\uffc5\014\uffc5" +
    "\016\uffc5\020\uffc5\021\uffc5\022\uffc5\027\uffc5\031\uffc5\032" +
    "\uffc5\033\uffc5\034\uffc5\040\uffc5\041\uffc5\043\uffc5\045\uffc5" +
    "\051\uffc5\054\uffc5\055\uffc5\061\uffc5\062\uffc5\064\uffc5\067" +
    "\uffc5\071\uffc5\072\uffc5\073\uffc5\074\uffc5\075\uffc5\076\uffc5" +
    "\077\uffc5\101\uffc5\102\uffc5\103\uffc5\104\uffc5\105\uffc5\106" +
    "\uffc5\107\uffc5\001\002\000\042\004\115\016\123\031\111" +
    "\045\117\051\120\054\106\055\124\061\110\067\113\071" +
    "\125\074\105\075\101\103\122\104\107\105\071\107\114" +
    "\001\002\000\004\066\u0115\001\002\000\116\004\uff9c\011" +
    "\uff9c\012\uff9c\014\uff9c\016\uff9c\020\uff9c\021\uff9c\022\uff9c" +
    "\027\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\040\uff9c\041" +
    "\uff9c\043\uff9c\045\uff9c\051\uff9c\054\uff9c\055\uff9c\061\uff9c" +
    "\062\uff9c\064\uff9c\067\uff9c\071\uff9c\072\uff9c\073\uff9c\074" +
    "\uff9c\075\uff9c\076\uff9c\077\uff9c\101\uff9c\102\uff9c\103\uff9c" +
    "\104\uff9c\105\uff9c\106\uff9c\107\uff9c\001\002\000\116\004" +
    "\uffca\011\uffca\012\uffca\014\uffca\016\uffca\020\uffca\021\uffca" +
    "\022\uffca\027\uffca\031\uffca\032\uffca\033\uffca\034\uffca\040" +
    "\uffca\041\uffca\043\uffca\045\uffca\051\uffca\054\uffca\055\uffca" +
    "\061\uffca\062\uffca\064\uffca\067\uffca\071\uffca\072\uffca\073" +
    "\uffca\074\uffca\075\uffca\076\uffca\077\uffca\101\uffca\102\uffca" +
    "\103\uffca\104\uffca\105\uffca\106\uffca\107\uffca\001\002\000" +
    "\004\066\u0118\001\002\000\116\004\uff9a\011\uff9a\012\uff9a" +
    "\014\uff9a\016\uff9a\020\uff9a\021\uff9a\022\uff9a\027\uff9a\031" +
    "\uff9a\032\uff9a\033\uff9a\034\uff9a\040\uff9a\041\uff9a\043\uff9a" +
    "\045\uff9a\051\uff9a\054\uff9a\055\uff9a\061\uff9a\062\uff9a\064" +
    "\uff9a\067\uff9a\071\uff9a\072\uff9a\073\uff9a\074\uff9a\075\uff9a" +
    "\076\uff9a\077\uff9a\101\uff9a\102\uff9a\103\uff9a\104\uff9a\105" +
    "\uff9a\106\uff9a\107\uff9a\001\002\000\116\004\115\011\ufff0" +
    "\012\366\014\355\016\123\020\ufff0\021\343\022\342\027" +
    "\362\031\111\032\ufff0\033\370\034\ufff0\040\372\041\ufff0" +
    "\043\350\045\117\051\120\054\106\055\124\061\110\062" +
    "\uffcc\064\345\067\113\071\125\072\014\073\011\074\105" +
    "\075\101\076\024\077\340\101\351\102\341\103\122\104" +
    "\107\105\071\106\ufff0\107\114\001\002\000\004\062\uffcf" +
    "\001\002\000\004\062\u011c\001\002\000\120\004\uffce\011" +
    "\uffce\012\uffce\014\uffce\016\uffce\020\uffce\021\uffce\022\uffce" +
    "\024\uffce\027\uffce\031\uffce\032\uffce\033\uffce\034\uffce\040" +
    "\uffce\041\uffce\043\uffce\045\uffce\051\uffce\054\uffce\055\uffce" +
    "\061\uffce\062\uffce\064\uffce\067\uffce\071\uffce\072\uffce\073" +
    "\uffce\074\uffce\075\uffce\076\uffce\077\uffce\101\uffce\102\uffce" +
    "\103\uffce\104\uffce\105\uffce\106\uffce\107\uffce\001\002\000" +
    "\004\066\u011f\001\002\000\116\004\uff9e\011\uff9e\012\uff9e" +
    "\014\uff9e\016\uff9e\020\uff9e\021\uff9e\022\uff9e\027\uff9e\031" +
    "\uff9e\032\uff9e\033\uff9e\034\uff9e\040\uff9e\041\uff9e\043\uff9e" +
    "\045\uff9e\051\uff9e\054\uff9e\055\uff9e\061\uff9e\062\uff9e\064" +
    "\uff9e\067\uff9e\071\uff9e\072\uff9e\073\uff9e\074\uff9e\075\uff9e" +
    "\076\uff9e\077\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e\105" +
    "\uff9e\106\uff9e\107\uff9e\001\002\000\116\004\uff9d\011\uff9d" +
    "\012\uff9d\014\uff9d\016\uff9d\020\uff9d\021\uff9d\022\uff9d\027" +
    "\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\040\uff9d\041\uff9d" +
    "\043\uff9d\045\uff9d\051\uff9d\054\uff9d\055\uff9d\061\uff9d\062" +
    "\uff9d\064\uff9d\067\uff9d\071\uff9d\072\uff9d\073\uff9d\074\uff9d" +
    "\075\uff9d\076\uff9d\077\uff9d\101\uff9d\102\uff9d\103\uff9d\104" +
    "\uff9d\105\uff9d\106\uff9d\107\uff9d\001\002\000\116\004\uffa0" +
    "\011\uffa0\012\uffa0\014\uffa0\016\uffa0\020\uffa0\021\uffa0\022" +
    "\uffa0\027\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\040\uffa0" +
    "\041\uffa0\043\uffa0\045\uffa0\051\uffa0\054\uffa0\055\uffa0\061" +
    "\uffa0\062\uffa0\064\uffa0\067\uffa0\071\uffa0\072\uffa0\073\uffa0" +
    "\074\uffa0\075\uffa0\076\uffa0\077\uffa0\101\uffa0\102\uffa0\103" +
    "\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\001\002\000\044" +
    "\004\115\016\123\025\u0125\031\111\045\117\051\120\054" +
    "\106\055\124\061\110\067\113\071\125\074\105\075\101" +
    "\103\122\104\107\105\071\107\114\001\002\000\006\057" +
    "\uff96\066\uff96\001\002\000\006\057\uff98\066\uff98\001\002" +
    "\000\006\057\u0126\066\u0127\001\002\000\006\057\uff95\066" +
    "\uff95\001\002\000\044\004\115\016\123\025\u0125\031\111" +
    "\045\117\051\120\054\106\055\124\061\110\067\113\071" +
    "\125\074\105\075\101\103\122\104\107\105\071\107\114" +
    "\001\002\000\116\004\uff9b\011\uff9b\012\uff9b\014\uff9b\016" +
    "\uff9b\020\uff9b\021\uff9b\022\uff9b\027\uff9b\031\uff9b\032\uff9b" +
    "\033\uff9b\034\uff9b\040\uff9b\041\uff9b\043\uff9b\045\uff9b\051" +
    "\uff9b\054\uff9b\055\uff9b\061\uff9b\062\uff9b\064\uff9b\067\uff9b" +
    "\071\uff9b\072\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077" +
    "\uff9b\101\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b" +
    "\107\uff9b\001\002\000\006\057\uff97\066\uff97\001\002\000" +
    "\004\066\u012a\001\002\000\116\004\uff99\011\uff99\012\uff99" +
    "\014\uff99\016\uff99\020\uff99\021\uff99\022\uff99\027\uff99\031" +
    "\uff99\032\uff99\033\uff99\034\uff99\040\uff99\041\uff99\043\uff99" +
    "\045\uff99\051\uff99\054\uff99\055\uff99\061\uff99\062\uff99\064" +
    "\uff99\067\uff99\071\uff99\072\uff99\073\uff99\074\uff99\075\uff99" +
    "\076\uff99\077\uff99\101\uff99\102\uff99\103\uff99\104\uff99\105" +
    "\uff99\106\uff99\107\uff99\001\002\000\004\043\350\001\002" +
    "\000\116\004\uffa5\011\uffa5\012\uffa5\014\uffa5\016\uffa5\020" +
    "\uffa5\021\uffa5\022\uffa5\027\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\040\uffa5\041\uffa5\043\uffa5\045\uffa5\051\uffa5\054" +
    "\uffa5\055\uffa5\061\uffa5\062\uffa5\064\uffa5\067\uffa5\071\uffa5" +
    "\072\uffa5\073\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\101" +
    "\uffa5\102\uffa5\103\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5" +
    "\001\002\000\010\044\uffd8\071\060\107\uffd8\001\002\000" +
    "\004\015\u012f\001\002\000\014\011\033\032\034\041\035" +
    "\100\041\106\031\001\002\000\004\107\u0131\001\002\000" +
    "\004\045\uffe5\001\002\000\004\045\u0133\001\002\000\016" +
    "\011\033\032\034\034\032\041\035\065\uffb8\106\031\001" +
    "\002\000\004\065\u0135\001\002\000\004\066\uffe4\001\002" +
    "\000\004\066\u0137\001\002\000\032\002\uffe3\011\uffe3\020" +
    "\uffe3\030\uffe3\032\uffe3\034\uffe3\035\uffe3\041\uffe3\072\uffe3" +
    "\073\uffe3\076\uffe3\106\uffe3\001\002\000\006\017\317\066" +
    "\u0139\001\002\000\032\002\ufff4\011\ufff4\020\ufff4\030\ufff4" +
    "\032\ufff4\034\ufff4\035\ufff4\041\ufff4\072\ufff4\073\ufff4\076" +
    "\ufff4\106\ufff4\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0138\000\006\003\003\114\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\014\007\016\010\005" +
    "\011\020\012\012\013\022\014\011\015\015\001\001\000" +
    "\002\001\001\000\012\100\024\101\026\102\234\104\u012c" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\100" +
    "\024\101\026\102\234\104\233\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\006\232\007\016\010\005\011\020" +
    "\012\012\013\022\014\011\015\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\100\024" +
    "\101\026\102\027\103\025\001\001\000\002\001\001\000" +
    "\004\107\226\001\001\000\002\001\001\000\010\052\062" +
    "\053\056\054\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\100\024\101\026\102\036\105\037\001\001\000" +
    "\010\052\060\053\056\054\055\001\001\000\004\016\042" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\061\046\100\024\101\026\102\027\103\044" +
    "\112\047\113\045\001\001\000\004\016\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\061\052\100\024\101\026\102\027\103" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\054\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\064\001\001\000\042\044\076\046\120\060\115\063" +
    "\111\064\103\065\102\066\101\067\077\070\075\071\072" +
    "\072\071\073\067\074\065\075\066\076\074\077\073\001" +
    "\001\000\002\001\001\000\004\057\201\001\001\000\002" +
    "\001\001\000\004\056\174\001\001\000\002\001\001\000" +
    "\004\050\167\001\001\000\004\047\160\001\001\000\002" +
    "\001\001\000\004\060\206\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\046\120\060\115\075\144\076\074\077\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\046\120\060\115\075\136\076\074\077\073\001" +
    "\001\000\014\046\120\060\115\075\135\076\074\077\073" +
    "\001\001\000\050\046\120\060\115\063\130\064\103\065" +
    "\102\066\101\067\077\070\075\071\072\072\071\073\067" +
    "\074\065\075\066\076\074\077\073\100\024\101\026\102" +
    "\027\103\131\001\001\000\002\001\001\000\014\046\120" +
    "\060\115\075\127\076\074\077\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\046\120" +
    "\060\115\075\125\076\074\077\073\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\046\120\060\115\075\133\076" +
    "\074\077\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\046\120\060" +
    "\115\075\140\076\074\077\073\100\024\101\026\102\027" +
    "\103\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\046\120\060\115\065\147\066\101\067\077\070\075\071" +
    "\072\072\071\073\067\074\065\075\146\076\074\077\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\046" +
    "\120\060\115\066\151\067\077\070\075\071\072\072\071" +
    "\073\067\074\065\075\146\076\074\077\073\001\001\000" +
    "\002\001\001\000\030\046\120\060\115\067\153\070\075" +
    "\071\072\072\071\073\067\074\065\075\146\076\074\077" +
    "\073\001\001\000\002\001\001\000\026\046\120\060\115" +
    "\070\155\071\072\072\071\073\067\074\065\075\146\076" +
    "\074\077\073\001\001\000\002\001\001\000\024\046\120" +
    "\060\115\071\157\072\071\073\067\074\065\075\146\076" +
    "\074\077\073\001\001\000\004\047\160\001\001\000\022" +
    "\046\120\060\115\072\163\073\067\074\065\075\146\076" +
    "\074\077\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\167\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\046\120\060\115\073\171" +
    "\074\065\075\146\076\074\077\073\001\001\000\002\001" +
    "\001\000\004\056\174\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\046\120\060\115\074\175\075\146\076" +
    "\074\077\073\001\001\000\004\057\201\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\046" +
    "\120\060\115\075\202\076\074\077\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\046\120\060\115\063" +
    "\221\064\103\065\102\066\101\067\077\070\075\071\072" +
    "\072\071\073\067\074\065\075\066\076\074\077\073\001" +
    "\001\000\044\025\215\045\214\046\120\060\115\063\213" +
    "\064\103\065\102\066\101\067\077\070\075\071\072\072" +
    "\071\073\067\074\065\075\066\076\074\077\073\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\046" +
    "\120\060\115\063\220\064\103\065\102\066\101\067\077" +
    "\070\075\071\072\072\071\073\067\074\065\075\066\076" +
    "\074\077\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\046\120\060\115\063\224\064" +
    "\103\065\102\066\101\067\077\070\075\071\072\072\071" +
    "\073\067\074\065\075\066\076\074\077\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\052\263\053\056\054\055\110\264\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\100\024\101" +
    "\026\102\234\104\237\001\001\000\012\052\241\053\056" +
    "\054\055\111\240\001\001\000\002\001\001\000\004\055" +
    "\242\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\044\245\046\120\060\115\063\111\064\103\065\102\066" +
    "\101\067\077\070\075\071\072\072\071\073\067\074\065" +
    "\075\066\076\074\077\073\001\001\000\002\001\001\000" +
    "\010\052\250\053\056\054\055\001\001\000\002\001\001" +
    "\000\004\055\251\001\001\000\002\001\001\000\002\001" +
    "\001\000\042\044\254\046\120\060\115\063\111\064\103" +
    "\065\102\066\101\067\077\070\075\071\072\072\071\073" +
    "\067\074\065\075\066\076\074\077\073\001\001\000\002" +
    "\001\001\000\012\100\024\101\026\102\036\105\256\001" +
    "\001\000\004\016\257\001\001\000\002\001\001\000\020" +
    "\061\046\100\024\101\026\102\027\103\044\112\261\113" +
    "\045\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\275\001\001\000\002\001\001\000\010\052\267\053" +
    "\056\054\055\001\001\000\002\001\001\000\004\055\270" +
    "\001\001\000\002\001\001\000\004\051\272\001\001\000" +
    "\002\001\001\000\040\046\120\060\115\063\274\064\103" +
    "\065\102\066\101\067\077\070\075\071\072\072\071\073" +
    "\067\074\065\075\066\076\074\077\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\051\277\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\115\302\001\001" +
    "\000\020\007\306\017\304\020\305\100\024\101\026\102" +
    "\234\104\303\001\001\000\012\052\313\053\056\054\055" +
    "\106\312\001\001\000\016\007\306\020\310\100\024\101" +
    "\026\102\234\104\303\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\052\320\053\056\054" +
    "\055\001\001\000\002\001\001\000\004\055\321\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\100\024\101" +
    "\026\102\036\105\324\001\001\000\004\016\325\001\001" +
    "\000\002\001\001\000\004\116\327\001\001\000\002\001" +
    "\001\000\020\061\046\100\024\101\026\102\027\103\044" +
    "\112\331\113\045\001\001\000\002\001\001\000\004\117" +
    "\333\001\001\000\002\001\001\000\106\012\363\013\366" +
    "\014\011\015\357\021\360\022\351\023\364\024\352\026" +
    "\355\030\362\031\346\032\373\033\370\034\336\035\335" +
    "\036\343\037\345\040\353\041\372\046\120\060\115\063" +
    "\356\064\103\065\102\066\101\067\077\070\075\071\072" +
    "\072\071\073\067\074\065\075\066\076\074\077\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\046\120" +
    "\060\115\063\u012a\064\103\065\102\066\101\067\077\070" +
    "\075\071\072\072\071\073\067\074\065\075\066\076\074" +
    "\077\073\001\001\000\014\046\120\060\115\075\u0128\076" +
    "\074\077\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\046\120\060\115\063\u011c\064" +
    "\103\065\102\066\101\067\077\070\075\071\072\072\071" +
    "\073\067\074\065\075\066\076\074\077\073\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\122\u0118\001\001" +
    "\000\014\046\120\060\115\075\u0116\076\074\077\073\001" +
    "\001\000\102\012\363\013\366\014\011\015\357\023\u0115" +
    "\024\352\026\355\030\362\031\346\032\373\033\370\034" +
    "\336\035\335\036\343\037\345\040\353\041\372\046\120" +
    "\060\115\063\356\064\103\065\102\066\101\067\077\070" +
    "\075\071\072\072\071\073\067\074\065\075\066\076\074" +
    "\077\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\046\120\060\115\063\374\064\103\065\102\066\101" +
    "\067\077\070\075\071\072\072\071\073\067\074\065\075" +
    "\066\076\074\077\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\375\001\001\000\004\027\376\001" +
    "\001\000\002\001\001\000\004\024\u0100\001\001\000\002" +
    "\001\001\000\014\062\u0103\100\024\101\026\102\027\103" +
    "\u0102\001\001\000\004\016\u0109\001\001\000\002\001\001" +
    "\000\040\046\120\060\115\063\u0105\064\103\065\102\066" +
    "\101\067\077\070\075\071\072\072\071\073\067\074\065" +
    "\075\066\076\074\077\073\001\001\000\002\001\001\000" +
    "\004\124\u0107\001\001\000\004\024\u0108\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\040\046\120\060\115\063\u010d\064\103\065\102" +
    "\066\101\067\077\070\075\071\072\072\071\073\067\074" +
    "\065\075\066\076\074\077\073\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\046\120\060\115\075\u0113\076\074" +
    "\077\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\106" +
    "\012\363\013\366\014\011\015\357\021\u0119\022\351\023" +
    "\364\024\352\026\355\030\362\031\346\032\373\033\370" +
    "\034\336\035\335\036\343\037\345\040\353\041\372\046" +
    "\120\060\115\063\356\064\103\065\102\066\101\067\077" +
    "\070\075\071\072\072\071\073\067\074\065\075\066\076" +
    "\074\077\073\001\001\000\004\123\u011a\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\044\042\u0123" +
    "\043\u0122\046\120\060\115\063\u0121\064\103\065\102\066" +
    "\101\067\077\070\075\071\072\072\071\073\067\074\065" +
    "\075\066\076\074\077\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\043\u0127\046\120\060\115\063\u0121\064\103\065\102\066" +
    "\101\067\077\070\075\071\072\072\071\073\067\074\065" +
    "\075\066\076\074\077\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\u012b\001\001\000\002\001\001\000\012\052\313\053" +
    "\056\054\055\106\u0137\001\001\000\002\001\001\000\012" +
    "\100\024\101\026\102\036\105\u012f\001\001\000\002\001" +
    "\001\000\004\120\u0131\001\001\000\002\001\001\000\020" +
    "\061\046\100\024\101\026\102\027\103\044\112\u0133\113" +
    "\045\001\001\000\002\001\001\000\004\121\u0135\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // QualIdent ::= T_ID_U 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       RESULT = ((MyParser) parser).DoQualIdent (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(62/*QualIdent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Designator3 ::= T_THIS 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("this");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("nullptr");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("false");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        RESULT = new ConstSTO ("true");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(61/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).DoFuncCall (_1);
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(60/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // Designator ::= T_LPAREN Type T_RPAREN Designator 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // Designator ::= T_SIZEOF T_LPAREN Type T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new ConstSTO("sizeof type - fix me");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
			RESULT = new ConstSTO("sizeof variable - fix me");
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "--";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "++";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // MulOp ::= T_MOD 
            {
              String RESULT = null;
		
                        RESULT = "%";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // MulOp ::= T_SLASH 
            {
              String RESULT = null;
		
                        RESULT = "/";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // MulOp ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // AddOp ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // AddOp ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Relation ::= T_GTE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Relation ::= T_LTE 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Relation ::= T_GT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Relation ::= T_LT 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(38/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Equality ::= T_NEQ 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Equality ::= T_EQU 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(37/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(58/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(56/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(55/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(54/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(53/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(52/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Expr1 ::= Expr1 T_AND Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(51/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Expr0 ::= Expr0 T_OR Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                        ((MyParser) parser).DoAssignExpr (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ExprList ::= ExprList T_COMMA Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ExprList ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(35/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // OptExprList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // OptExprList ::= ExprList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(19/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ConstExpr ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(34/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // WritePair ::= T_ENDL 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // WritePair ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // WritePairList ::= WritePair 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(31/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NewStmt ::= T_NEW Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(30/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(29/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(28/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(26/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(25/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(24/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ForeachStmt ::= T_FOREACH T_LPAREN IterationVarDecl T_COLON Expr T_RPAREN NT$8 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoBlockClose();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(22/*ForeachStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // NT$8 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

                        ((MyParser) parser).DoBlockOpen();
                        ((MyParser) parser).DoIterationVarDecl (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // IterationVarDecl ::= Type OptRef T_ID 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*IterationVarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // WhileStmt ::= T_WHILE Expr CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(23/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OptElse ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OptElse ::= T_ELSE CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IfStmt ::= T_IF Expr CodeBlock OptElse 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(20/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OptInit ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OptInit ::= T_ASSIGN Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(39/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IdListWInit ::= IdListWInit T_COMMA OptModifierList OptArrayDef T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = _1;
			RESULT.addElement (_3);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IdListWInit ::= OptModifierList OptArrayDef T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
			RESULT = new Vector ();
			RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(71/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IdListWOptInit ::= IdListWOptInit T_COMMA OptModifierList OptArrayDef T_ID OptInit 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IdListWOptInit ::= OptModifierList OptArrayDef T_ID OptInit 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(70/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IdListUpper ::= IdListUpper T_COMMA T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IdListUpper ::= T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(69/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IdList ::= IdList T_COMMA OptModifierList OptArrayDef T_ID 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IdList ::= OptModifierList OptArrayDef T_ID 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptRef ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptRef ::= T_AMPERSAND 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ParamDecl ::= Type OptRef T_ID 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(47/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(73/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(73/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OptParamList ::= 
            {
              Vector RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(72/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= ForeachStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Stmt ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(17/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // StmtList ::= StmtList Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StmtList ::= Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(16/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // OptStmtList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // OptStmtList ::= StmtList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(15/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CodeBlock ::= T_LBRACE NT$6 OptStmtList NT$7 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(18/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NT$7 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockClose(); 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NT$6 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(80/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(67/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ReturnType ::= SubType OptModifierList 
            {
              Type RESULT = null;
		
                        // You should determine the type and return it here
                        RESULT = null;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptArrayDef ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*OptArrayDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptArrayDef ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(43/*OptArrayDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Modifier ::= T_STAR 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(42/*Modifier*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ModifierList ::= ModifierList Modifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*ModifierList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ModifierList ::= Modifier 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(41/*ModifierList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OptModifierList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*OptModifierList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OptModifierList ::= ModifierList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(40/*OptModifierList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BasicType ::= T_INT 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(63/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SubType ::= BasicType 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SubType ::= QualIdent 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // UndecoratedType ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(66/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // UndecoratedType ::= SubType 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(66/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(65/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Type ::= SubType OptModifierList OptArrayDef 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(65/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$4 T_LPAREN OptParamList T_RPAREN NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$5 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NT$4 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$2 T_LPAREN OptParamList T_RPAREN NT$3 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$3 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NT$2 ::= 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
                        ((MyParser) parser).DoFuncDecl_1(_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldList ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*FieldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldList ::= UndecoratedType IdList T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*FieldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FieldsList ::= FieldsList FieldList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FieldsList ::= FieldList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypedefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$1 FieldsList T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                         ((MyParser) parser).DoBlockClose();
                         ((MyParser) parser).DoStructdefDecl (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NT$1 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoBlockOpen();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypedefDecl ::= T_TYPEDEF Type IdListUpper T_SEMI 
            {
              Object RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoTypedefDecl (_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(11/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // OptStatic ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // OptStatic ::= T_STATIC 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(10/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ConstDecl ::= OptStatic T_CONST UndecoratedType IdListWInit T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        ((MyParser) parser).DoConstDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= OptStatic UndecoratedType IdListWOptInit T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoVarDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExternDecl ::= T_EXTERN UndecoratedType IdList T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoExternDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoProgramEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                         ((MyParser) parser).DoProgramStart(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(74/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

